<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Red, Green, Rewrite</title>
  <subtitle>the tales about software development</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://red-green-rewrite.github.io/"/>
  <updated>2016-09-26T15:29:31.379Z</updated>
  <id>http://red-green-rewrite.github.io/</id>
  
  <author>
    <name>Milosz Krajewski</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shaking maze generator</title>
    <link href="http://red-green-rewrite.github.io/2016/09/15/Shaking-maze-generator/"/>
    <id>http://red-green-rewrite.github.io/2016/09/15/Shaking-maze-generator/</id>
    <published>2016-09-15T14:19:49.000Z</published>
    <updated>2016-09-26T15:29:31.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-links"><a href="#Quick-links" class="headerlink" title="Quick links"></a>Quick links</h2><ul>
<li><a href="/2016/09/14/Maze-generator-with-Fable/">Previous article</a></li>
<li><a href="https://github.com/MiloszKrajewski/fable-daedalus" target="_blank" rel="external">Source code</a></li>
<li><a href="https://dl.dropboxusercontent.com/u/317815/daedalus/index.html" target="_blank" rel="external">Online demo</a></li>
</ul>
<h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>This blogpost requires familiarity with <a href="/2016/09/14/Maze-generator-with-Fable/">previous one</a>.</p>
<h2 id="Low-branching-factor"><a href="#Low-branching-factor" class="headerlink" title="Low branching factor"></a>Low branching factor</h2><p>One of the disadvantages of using DFS to build mazes is “low branching factor”. The problem is that it actually runs for long time before hitting dead-end and having to backtrack, so it creates very long corridors with no room to “make the wrong turn” for potential maze explorer.<br>Let’s deal with it.</p>
<h2 id="The-algorithm"><a href="#The-algorithm" class="headerlink" title="The algorithm"></a>The algorithm</h2><p>Originally I used recursive version, but to avoid stack overflow, actual demo was done non-recursive version of DFS. </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> stackless mark test fanout node = seq &#123;</div><div class="line">    <span class="keyword">let</span> <span class="keyword">mutable</span> stack = [[node]]</div><div class="line">    <span class="keyword">while</span> stack.Length &gt; <span class="number">0</span> <span class="keyword">do</span></div><div class="line">        <span class="keyword">let</span> head, stack' = </div><div class="line">            <span class="keyword">match</span> stack <span class="keyword">with</span></div><div class="line">            | [] -&gt; None, [] </div><div class="line">            | [] :: rest -&gt; None, rest</div><div class="line">            | (head :: tail) :: rest -&gt;</div><div class="line">                <span class="keyword">if</span> test head <span class="keyword">then</span> None, tail :: rest</div><div class="line">                <span class="keyword">else</span> head |&gt; apply mark |&gt; Some, (head |&gt; fanout |&gt; List.ofSeq) :: tail :: rest</div><div class="line">        <span class="keyword">match</span> head <span class="keyword">with</span> | Some n -&gt; <span class="keyword">yield</span> n | _ -&gt; ()</div><div class="line">        stack &lt;- stack'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This version will be modified to allow “shaking the stack”. I’ll introduce one argument (<code>shake</code>) and use <code>shake stack</code> instead of just <code>stack</code> in match statement.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> stackless mark test fanout shake node = seq &#123; <span class="comment">// &lt;-- here</span></div><div class="line">    <span class="keyword">let</span> <span class="keyword">mutable</span> stack = [[node]]</div><div class="line">    <span class="keyword">while</span> stack.Length &gt; <span class="number">0</span> <span class="keyword">do</span></div><div class="line">        <span class="keyword">let</span> head, stack' = </div><div class="line">            <span class="keyword">match</span> shake stack <span class="keyword">with</span> <span class="comment">// &lt;-- and here</span></div><div class="line">            | [] -&gt; None, [] </div><div class="line">            | [] :: rest -&gt; None, rest</div><div class="line">            | (head :: tail) :: rest -&gt;</div><div class="line">                <span class="keyword">if</span> test head <span class="keyword">then</span> None, tail :: rest</div><div class="line">                <span class="keyword">else</span> head |&gt; apply mark |&gt; Some, (head |&gt; fanout |&gt; List.ofSeq) :: tail :: rest</div><div class="line">        <span class="keyword">match</span> head <span class="keyword">with</span> | Some n -&gt; <span class="keyword">yield</span> n | _ -&gt; ()</div><div class="line">        stack &lt;- stack'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>That’s absolutely it in “The algorithm” layer.</p>
<h2 id="The-glue"><a href="#The-glue" class="headerlink" title="The glue"></a>The glue</h2><p>There was a “glue” layer adapting “The algorithm” to “The domain” and it just stopped working as we added new argument to the function. Don’t worry, though, it just a simple fix. </p>
<p>Previously it was calling <code>traverse</code> (or <code>stackless</code> depending which approach you used ‘elegant’ or ‘safe’) now it should call <code>stackless</code> (as <code>traverse</code> does not support shaking) with this extra argument. So the old code: </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">InitAt (<span class="number">0</span>, <span class="number">0</span>) </div><div class="line">|&gt; DFS.stackless (targetOf &gt;&gt; mark) (targetOf &gt;&gt; test) (targetOf &gt;&gt; fanout &gt;&gt; Array.shuffle)</div></pre></td></tr></table></figure>
<p>should be changed to:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">InitAt (<span class="number">0</span>, <span class="number">0</span>) </div><div class="line">|&gt; DFS.stackless (targetOf &gt;&gt; mark) (targetOf &gt;&gt; test) (targetOf &gt;&gt; fanout &gt;&gt; Array.shuffle) id</div></pre></td></tr></table></figure>
<p>and the code will compile again and work exactly as it was working before (you may remember that <code>id</code> function does absolutely nothing). Why we did that then?</p>
<p>Because now, on every single step we have an ability to modify the backtracking stack. </p>
<p>I’ll suggest something like:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> shake stack = </div><div class="line">    <span class="keyword">if</span> Random.random () &gt; <span class="number">0.01</span> <span class="keyword">then</span> stack</div><div class="line">    <span class="keyword">else</span> stack |&gt; Array.ofList |&gt; apply Array.shuffleInPlace |&gt; Array.toList</div></pre></td></tr></table></figure>
<p>Which in 99% of cases returns <code>stack</code> unmodified but from time to time shuffles it completely. Of course, it would be nice to use it now (<code>id</code> gets replaced by <code>shake</code>):</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">InitAt (<span class="number">0</span>, <span class="number">0</span>) </div><div class="line">|&gt; DFS.stackless (targetOf &gt;&gt; mark) (targetOf &gt;&gt; test) (targetOf &gt;&gt; fanout &gt;&gt; Array.shuffle) shake</div></pre></td></tr></table></figure>
<p>Please note, that from algorithm complexity point of view this is not good approach, as complexity just jumped from <strong>O(N)</strong> to <strong>O(N^2)</strong> (it’s a little but more complicated than that), but definitely it gives <a href="https://dl.dropboxusercontent.com/u/317815/daedalus/index.html" target="_blank" rel="external">better results</a>.</p>
<p>The bottom line is that I did not really modify the algorithm (<em>DFS</em>) I just injected some extra behavior into it, but it is totally externally controlled (kind of definition of “injected”, right?). Functional composition rlz.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Quick-links&quot;&gt;&lt;a href=&quot;#Quick-links&quot; class=&quot;headerlink&quot; title=&quot;Quick links&quot;&gt;&lt;/a&gt;Quick links&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2016/09/14/Maze-ge
    
    </summary>
    
    
      <category term="fsharp" scheme="http://red-green-rewrite.github.io/tags/fsharp/"/>
    
      <category term="fable" scheme="http://red-green-rewrite.github.io/tags/fable/"/>
    
      <category term="webpack" scheme="http://red-green-rewrite.github.io/tags/webpack/"/>
    
      <category term="algorithm" scheme="http://red-green-rewrite.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Maze generator with Fable</title>
    <link href="http://red-green-rewrite.github.io/2016/09/14/Maze-generator-with-Fable/"/>
    <id>http://red-green-rewrite.github.io/2016/09/14/Maze-generator-with-Fable/</id>
    <published>2016-09-14T19:53:39.000Z</published>
    <updated>2016-09-26T17:21:24.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-links"><a href="#Quick-links" class="headerlink" title="Quick links"></a>Quick links</h2><ul>
<li><a href="/2016/09/15/Shaking-maze-generator/">Follow up</a></li>
<li><a href="https://github.com/MiloszKrajewski/fable-daedalus" target="_blank" rel="external">Source code</a></li>
<li><a href="https://dl.dropboxusercontent.com/u/317815/daedalus/index.html" target="_blank" rel="external">Online demo</a></li>
</ul>
<h2 id="Redgate’s-first-ever-coding-challenge"><a href="#Redgate’s-first-ever-coding-challenge" class="headerlink" title="Redgate’s first ever coding challenge"></a>Redgate’s first ever coding challenge</h2><p>For quite some time I was looking for an excuse to use <a href="https://fable-compiler.github.io/" target="_blank" rel="external">Fable</a>. Fable is <a href="http://fsharp.org/" target="_blank" rel="external">F#</a> to JavaScript compiler. I generally shy away from JavaScript, as I am biased towards backend but as a big fan of F# I wanted to play a little with Fable (and <a href="https://www.scala-js.org/" target="_blank" rel="external">Scala.js</a> actually). On top of that, I wanted to try some other technologies I’ve never used before: <a href="https://github.com/Matt-Esch/virtual-dom" target="_blank" rel="external">VirtualDom</a> (maybe <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a>), <a href="https://webpack.github.io/" target="_blank" rel="external">Webpack</a>, <a href="http://www.pixijs.com/" target="_blank" rel="external">Pixi.js</a>. All I needed was an excuse…</p>
<p>I’ve found <a href="http://www.red-gate.com/our-company/entrypage/coding-challenge" target="_blank" rel="external">Redgate’s first ever coding challenge</a> on LinkedIn and I decided to do it with Fable in the browser. The challenge is about writing an application to generate mazes (thus the Daedalus reference). I wasn’t going to apply as my solution is probably the most trivial one using “randomized DFS”, so there is nothing to show off, but, I wanted to use those tools.</p>
<p><em>EDIT</em>: eventually, it did apply</p>
<p><img src="./maze-100x100.png" alt="100x100">    </p>
<p>Initially solution was building SVG with VirtualDOM. It was very neat as Fable/VirtualDOM uses <a href="http://elm-lang.org/" target="_blank" rel="external">Elm</a> architecture (check Fable <a href="https://fable-compiler.github.io/samples/virtualdom/index.html" target="_blank" rel="external">samples page</a>). It was fast enough to solve the problem but unfortunatelly, for bigger mazes (&gt;50x50), not fast enough for live animation. Changing multiple <code>&lt;rect&gt;</code> to one long multipart <code>&lt;path&gt;</code> made it a little bit faster (~20%) but it still wasn’t good enough and it was definitely slowing down further it went.</p>
<p>The final version is not as ambitious, uses <a href="https://jquery.com/" target="_blank" rel="external">jQuery</a> and <a href="http://projects.calebevans.me/jcanvas/" target="_blank" rel="external">jCanvas</a>. Presentation layer is very old school, but it works and is very fast (relatively speaking, of course). Note, I could deal with the <code>&lt;canvas&gt;</code> without any supporting libraries, but one of my goals was to investigate and evaluate integration with native JavaScript libraries as, in my opinion, integration is one of the most important aspects of any X-to-JavaScript transpiler.     </p>
<h2 id="“You’re-very-clever-young-man-very-clever-”-said-the-old-lady-“But-it’s-functions-all-the-way-down-”"><a href="#“You’re-very-clever-young-man-very-clever-”-said-the-old-lady-“But-it’s-functions-all-the-way-down-”" class="headerlink" title="“You’re very clever, young man, very clever,” said the old lady. “But it’s functions all the way down!”"></a>“You’re very clever, young man, very clever,” said the old lady. “But it’s functions all the way down!”</h2><p><a href="https://vimeo.com/113588389" target="_blank" rel="external">Scott Wlaschin</a> says “No abstraction is too small”. I agree, I’m a big fan of “extracting abstraction” and I’m so glad F# supports and encourages local one-liners. I believe problems should be decomposed into small managable chunks first and then composed back into solution. Things should be named appropriately as well. Let me use example given by <a href="https://vimeo.com/97329157" target="_blank" rel="external">Kevlin Henney</a> (it’s actually Dan North’s example but I have no link): </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (portfolioIdsByTraderId.get(trader.getId()).containsKey(portfolio.getId())) &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Even if we understand every single word in this statement, it is still unclear what purpose it serves. It is not abstract enough, it contains too much of “implementation”. Maybe we should consider this as an alternative:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (trader.canView(portfolio)) &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Yup, that’s much better.</p>
<p>For every solution, at some point there will be a need for some “ugly implementation details”. It is just nicer when you can push it far away from business logic so it does not get in a way when you try to reason about what this code “actually does”.</p>
<p>In this article I will use a some one-liners. They might seem like overkill for this task but this is primarily fun project and using them is fun!</p>
<h2 id="The-algorithm"><a href="#The-algorithm" class="headerlink" title="The algorithm"></a>The algorithm</h2><p>There are few algorithms listed on <a href="https://en.wikipedia.org/wiki/Maze_generation_algorithm" target="_blank" rel="external">Wikipedia</a> and randomized depth-first search is probably the simplest one. </p>
<p>It has two disadvantages:</p>
<ul>
<li>solution has a low branching factor and contain many long corridors (please note, that this issue was addressed in <a href="/2016/09/15/Shaking-maze-generator/">following blogpost</a>)</li>
<li>solution does not contain cycles - This problem applies to most of solutions from Wikipedia. It seems that “maze generation problem” is perceived as “random spanning tree”. Cycles can be seen as shortcuts, therefore making it easier to solve for potential maze explorer, but also they open the door to “be lost forever”, making it infinitely harder. Trade-offs, trade-off, trade-offs.    </li>
</ul>
<p>I’m going to decompose the solution into smaller pieces instead of using single monolithic function. </p>
<blockquote>
<p>A physicist and a mathematician setting in a faculty lounge. Suddenly, the coffee machine catches on fire. The physicist grabs a bucket and leaps towards the sink, fills the bucket with water and puts out the fire. The second day, the same two sit in the same lounge. Again, the coffee machine catches on fire. This time, the mathematician stands up, gets a bucket, hands the bucket to the physicist, thus reducing the problem to a previously solved one. </p>
</blockquote>
<p>Let’s start with generic depth-first search then:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> DFS =</div><div class="line">    <span class="comment">// ('T -&gt; unit) -&gt; ('T -&gt; bool) -&gt; ('T -&gt; 'T seq) -&gt; 'T -&gt; 'T seq</span></div><div class="line">    <span class="keyword">let</span> <span class="keyword">rec</span> traverse mark test fanout node =  </div><div class="line">        seq &#123;</div><div class="line">            <span class="keyword">match</span> node |&gt; test <span class="keyword">with</span></div><div class="line">            | <span class="keyword">false</span> -&gt; </div><div class="line">                <span class="keyword">yield</span> node |&gt; apply mark</div><div class="line">                <span class="keyword">yield!</span> node |&gt; fanout |&gt; Seq.collect (traverse mark test fanout)</div><div class="line">            | _ -&gt; ()  </div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>where <code>mark: &#39;T -&gt; unit</code> is the function which will take a node and mark it as visited, <code>test: &#39;T -&gt; bool</code> will test is node has been visisted already, <code>fanout: &#39;T -&gt; &#39;T seq</code> will take a node and return a sequence of connected nodes (neighbours?) and finally <code>node: &#39;T</code> is just a starting point.</p>
<p>The algorithm goes like this:</p>
<ul>
<li>if node has not been visited yet (<code>node |&gt; test</code>) mark it as visisted (<code>apply mark</code>) and return it (<code>yield</code>). </li>
<li>for every connected node (<code>node |&gt; fanout</code>), rinse and repeat (<code>Seq.collect traverse mark test fanout</code>)</li>
</ul>
<p>If you don’t know what <code>apply</code> does I would recommend my <a href="/2016/09/14/Use-apply-and-carry-on/">other post</a>.</p>
<p>Done. We can go home… OK, I’m just joking.</p>
<p><em>NOTE</em>: This solution is vulnerable to stack overflow as it goes deeper and deeper with every visited node. The <a href="https://github.com/MiloszKrajewski/fable-daedalus" target="_blank" rel="external">actual solution</a> uses different implementation of DFS which is using <code>while</code> loop and lists to simulate call stack (I called it <code>stackless</code> which is a little self contradicting, isn’t it?). Idea is absolutely the same though, but code is less elegant.</p>
<h2 id="The-domain"><a href="#The-domain" class="headerlink" title="The domain"></a>The domain</h2><p>So, we have an algorithms. Now we need domain model.</p>
<p>Initially, the domain of this problem consisted of the <code>World</code>, which is a collection of <code>Rooms</code> which in turn have their <code>Location</code> and are connected (or not) through <code>Exits</code>. Not all of those concepts are needed for the algorithm. They may or may not be needed by presentation layer but we probably shouldn’t jump ahead, I guess.  </p>
<p>So, let’s start with <code>Location</code> (x and y coordinates) and <code>Direction</code> (north, east, etc…):</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">Location</span> </span>= int * int</div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">Direction</span> </span>= | North | East | South | West</div></pre></td></tr></table></figure>
<p>There is also a relation between <em>directions</em> (<code>opposite</code>) and a function allowing to move from one <em>location</em> in given <em>direction</em> (<code>shift</code>).  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> opposite direction = <span class="comment">// Direction -&gt; Direction </span></div><div class="line">    <span class="keyword">match</span> direction <span class="keyword">with</span> </div><div class="line">    | North -&gt; South | South -&gt; North </div><div class="line">    | West -&gt; East | East -&gt; West</div><div class="line"></div><div class="line"><span class="keyword">let</span> shift (x, y) direction = <span class="comment">// Location -&gt; Direction -&gt; Location</span></div><div class="line">    <span class="keyword">match</span> direction <span class="keyword">with</span></div><div class="line">    | North -&gt; (x, y - <span class="number">1</span>) | South -&gt; (x, y + <span class="number">1</span>) </div><div class="line">    | East -&gt; (x + <span class="number">1</span>, y) | West -&gt; (x - <span class="number">1</span>, y)</div></pre></td></tr></table></figure>
<p>Traversing a maze is about <em>actions</em> (or moves). Theoretically, we could model it with single type of action (<em>move south from 5,4 to 5,5</em>), but first move (which is <em>start at 0,0</em>) does not have source nor direction and with language like F# you should not compromise on domain model aka <a href="(https://fsharpforfunandprofit.com/posts/designing-with-types-making-illegal-states-unrepresentable/">make illegal state unrepresentable</a>.<br>So, I ended up with two possible actions: <em>teleporting to starting location</em> and <em>moving from one location to another</em>:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">Action</span> </span>=</div><div class="line">    | InitAt <span class="keyword">of</span> Location</div><div class="line">    | MoveTo <span class="keyword">of</span> Location * Direction * Location</div></pre></td></tr></table></figure>
<p>The <code>Action</code> has it’s “property” called target, the <code>Location</code> where it ends:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Action -&gt; Location</span></div><div class="line"><span class="keyword">let</span> targetOf action = </div><div class="line">    <span class="keyword">match</span> action <span class="keyword">with</span> </div><div class="line">    | InitAt location -&gt; location </div><div class="line">    | MoveTo (_, _, location) -&gt; location</div></pre></td></tr></table></figure>
<h2 id="Bringing-“The-algorithm”-and-“The-domain”-together"><a href="#Bringing-“The-algorithm”-and-“The-domain”-together" class="headerlink" title="Bringing “The algorithm” and “The domain” together"></a>Bringing “The algorithm” and “The domain” together</h2><p>It is important to realize, that DFS in this case does not really traverse <em>rooms</em> (graph nodes), it actually traverses <em>actions</em> (graph edges), although it is the <em>room</em> which is visted (not <em>action</em>).</p>
<p>Long story short, there is some glue needed between “The algorithm” and “The domain” presented above.</p>
<p>Let’s start with some one-liners for solution:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// int -&gt; int -&gt; Action seq</span></div><div class="line"><span class="keyword">let</span> buildMaze width height =</div><div class="line">    <span class="comment">// Location -&gt; bool</span></div><div class="line">    <span class="keyword">let</span> isValid (x, y) = x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x &lt; width &amp;&amp; y &lt; height</div><div class="line">    <span class="keyword">let</span> visited = HashSet()</div><div class="line">    <span class="keyword">let</span> encode (x, y) = y*width + x <span class="comment">// Location -&gt; int</span></div><div class="line">    <span class="comment">// Location -&gt; unit </span></div><div class="line">    <span class="keyword">let</span> mark location = location |&gt; encode |&gt; visited.Add |&gt; ignore</div><div class="line">    <span class="comment">// Location -&gt; bool</span></div><div class="line">    <span class="keyword">let</span> test location = location |&gt; encode |&gt; visited.Contains</div><div class="line">    <span class="comment">//...</span></div></pre></td></tr></table></figure>
<p><em>NOTE</em>: <code>HashSet</code> in Fable is modelled using JavaScript <code>Set</code> which does not use structural equality (I learnt it the hard way). Therefore two identical tuples would not be recognised as such. We need to <code>encode</code> tuple value as something which is properly handled by <code>Set</code>. Encoding tuple as single <code>int</code> is one options, encoding it as <code>string</code> would be also valid (but a little but slower, I suppose).</p>
<p>We have function to test is given <em>location</em> is valid for given maze size (<code>isValid</code>), we can test if <em>action</em> points to a <em>room</em> which has been <em>visisted</em> before (<code>test</code>) and mark the <em>location</em> as <em>visisted</em> if needed (<code>mark</code>). That is just a small vocabulary for our problem.</p>
<p>It’s time to define <code>fanout</code> method which will return all valid the neighbours: </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Location -&gt; Action seq</span></div><div class="line"><span class="keyword">let</span> fanout source =</div><div class="line">    [| West; North; East; South |] </div><div class="line">    |&gt; Array.map (<span class="keyword">fun</span> direction -&gt; MoveTo (source, direction, shift source direction))</div><div class="line">    |&gt; Array.filter (targetOf &gt;&gt; isValid)</div></pre></td></tr></table></figure>
<p>As you can see, it takes a <em>source location</em>, then generates a sequence of <code>MoveTo</code> <em>actions</em> in every direction and then eliminates the ones with invalid <em>target locations</em> (the ones which would point outside the maze). You may wonder why <code>fanout</code> returns candidates in pretty deterministic order. And that’s fair question. I just don’t think randomization stategy is responsibility of <code>fanout</code> function, I think we can postpone this decision (at least for 5 more seconds).</p>
<p>We have all building blocks ready now and it’s time to call <code>DFS.traverse</code> (or <code>DFS.stackless</code>). As I said before <code>traverse</code> operate on <em>actions</em> (not <em>locations</em>), and functions we defined so far work on <em>locations</em>. We will need some adapters, and some randomization of <code>fanout</code> output.</p>
<p>Functional composition to the rescue: </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">InitAt (<span class="number">0</span>, <span class="number">0</span>) </div><div class="line">|&gt; DFS.traverse (targetOf &gt;&gt; mark) (targetOf &gt;&gt; test) (targetOf &gt;&gt; fanout &gt;&gt; Array.shuffle)</div></pre></td></tr></table></figure>
<p>It starts with <em>action</em> (<code>InitAt (0, 0)</code>), and uses composition to adapt input argument of <code>mark</code>, <code>test</code> and <code>fanout</code>. It also randomizes the output of <code>fanout</code> with <code>shuffle</code>.</p>
<p>And this sequence of <em>actions</em> it the result of <code>buildMaze</code>.</p>
<p>Done, again. OK, we need presentation.</p>
<h2 id="Presentation"><a href="#Presentation" class="headerlink" title="Presentation"></a>Presentation</h2><p>Without getting into much details we need a <code>&lt;button&gt;</code> and a <code>&lt;canvas&gt;</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"restart"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>Restart<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">class</span>=<span class="string">"maze"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure>
<p>That’s the UI. Right? Yeah, kind of. Be aware that the code here is for illustration only, please refer to <a href="https://github.com/MiloszKrajewski/fable-daedalus" target="_blank" rel="external">github</a> for actual working sources.</p>
<p>Let’s start with importing native JavaScript libraries: </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> jq = importDefault&lt;obj&gt; <span class="string">"jquery"</span></div><div class="line">(importDefault&lt;obj&gt; <span class="string">"jcanvas"</span>) $ (jq, Browser.window) |&gt; ignore</div></pre></td></tr></table></figure>
<p>As you can see there a little bit weird syntax when accessing arbitrary JavaScript objects. The good news is you can <a href="https://www.npmjs.com/package/ts2fable" target="_blank" rel="external">import</a> <a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="external">TypeScript</a> <code>.d.ts</code> definition files into Fable to have strongly typed interfaces. In this case though, I used so little of it, that I could manage dynamic invocation.</p>
<p>Long story short, <code>importDefault</code> get’s translated into <code>require</code> (for <code>CommonJS</code>). The <code>$</code> operator is <em>invoke</em>, <code>?</code> operator is <em>get</em> and <code>&lt;-</code> is <em>set</em>. <code>$</code> operator in many cases can be ommited.<br>So, <code>a ? b ? c(77)</code> would be translated to <code>a.b.c(77);</code> while <code>a ? b ? c &lt;- 11</code> would be translated to <code>a.b.c = 11;</code>. </p>
<p>Please note, that as there is an assumptions that everything returns <code>obj</code> (or <code>obj -&gt; obj</code> which is also an <code>obj</code>). F# does not like dangling result values so you need to <code>ignore</code> results you don’t care about. I definitely recommend referring to Fable website for more details.</p>
<p>Let’s define some constants:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="meta">[&lt;Literal&gt;]</span> WORLD_WIDTH = <span class="number">100</span></div><div class="line"><span class="keyword">let</span> <span class="meta">[&lt;Literal&gt;]</span> WORLD_HEIGHT = <span class="number">100</span></div><div class="line"><span class="keyword">let</span> <span class="meta">[&lt;Literal&gt;]</span> ROOM_SIZE = <span class="number">5</span></div><div class="line"><span class="keyword">let</span> <span class="meta">[&lt;Literal&gt;]</span> DOOR_SIZE = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="meta">[&lt;Literal&gt;]</span> ROOM_COLOR = <span class="string">"#fff"</span></div><div class="line"><span class="keyword">let</span> <span class="meta">[&lt;Literal&gt;]</span> DOOR_COLOR = <span class="string">"#eee"</span></div></pre></td></tr></table></figure>
<p>and a simple function to convert world <em>location</em> to coordinates in pixels:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> toPixel (x, y) = <span class="comment">// Location -&gt; (int * int) // and yes, I'm cheting with types a little</span></div><div class="line">    x*ROOM_SIZE + (x + <span class="number">1</span>)*DOOR_SIZE, y*ROOM_SIZE + (y + <span class="number">1</span>)*DOOR_SIZE</div></pre></td></tr></table></figure>
<p>Let’s set the <code>&lt;canvas&gt;</code> up, by setting <code>width</code>, <code>height</code>, <code>viewbox</code> and <code>viewport</code> (using jQuery):</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> w, h = toPixel (WORLD_WIDTH, WORLD_HEIGHT)</div><div class="line"><span class="keyword">let</span> canvas = jq $ (<span class="string">"#canvas"</span>)</div><div class="line">canvas </div><div class="line">    ? attr(<span class="string">"width"</span>, w) ? attr(<span class="string">"height"</span>, h) </div><div class="line">    ? attr(<span class="string">"viewbox"</span>, sprintf <span class="string">"0 0 %d %d"</span> w h) </div><div class="line">    ? attr(<span class="string">"viewport"</span>, sprintf <span class="string">"0 0 %d %d"</span> w h) </div><div class="line">    |&gt; ignore</div></pre></td></tr></table></figure>
<p>and wire <code>click</code> event on “Restart” button:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> cancel = id</div><div class="line"><span class="keyword">let</span> button = jq $ (<span class="string">"#restart"</span>)  </div><div class="line">button ? click(<span class="keyword">fun</span> _ -&gt;</div><div class="line">    cancel ()</div><div class="line">    canvas ? clearCanvas () |&gt; ignore</div><div class="line">    cancel &lt;- startAnimation canvas</div><div class="line">) |&gt; ignore</div></pre></td></tr></table></figure>
<p>The thing with <code>cancel</code> might be a little bit unclear. Function <code>startAnimation</code> will return a function (function returning function, yes) which can be called to cancel animation. So next time <code>Restart</code> button is pressed previous animation will be cancelled before starting new one. To avoid <code>null</code> (or <code>None</code>) checking (on first run) <code>cancel</code> just gets initialized with function which does nothing (yes, <code>id</code> is a function which does nothing).</p>
<p>Back to solution, when button is pressed potential old animation is cancelled (<code>cancel()</code>), canvas is cleared (<code>canvas ? clearCanvas () |&gt; ignore</code>) and new animation is started (<code>cancel &lt;- startAnimation canvas</code>).</p>
<p>There is only one method left, then:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> startAnimation canvas = <span class="comment">// ...</span></div></pre></td></tr></table></figure>
<p>Please note, the code below in the scope of <code>startAnimation</code>.</p>
<p>We will definitely need to draw rectangles on canvas, and that’s kind of all we are going to do. I will use <code>jCanvas</code> to do this, but it is an overkill, of course, it could (and should?) be done with browser API, but I’m exploring here, right?<br>As with dynamic invocation eveything is <code>obj</code> we want to add some types when JavaScript and Fable meets. Let’s wrap <code>jCanvas.drawRect</code> first into <code>drawBox</code> function:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> drawBox (color: string) (x: int) (y: int) (w: int) (h: int) =</div><div class="line">    <span class="keyword">let</span> rect = </div><div class="line">        createObj [ </div><div class="line">            <span class="string">"fillStyle"</span> ==&gt; color</div><div class="line">            <span class="string">"x"</span> ==&gt; x; <span class="string">"y"</span> ==&gt; y; <span class="string">"width"</span> ==&gt; w; <span class="string">"height"</span> ==&gt; h </div><div class="line">            <span class="string">"fromCenter"</span> ==&gt; <span class="keyword">false</span> </div><div class="line">        ]</div><div class="line">    canvas ? drawRect(rect) |&gt; ignore</div></pre></td></tr></table></figure>
<p>Yup. Done. Not pretty but done. We can forget about this traumatic experience now. It actually generates quite readable code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rect = &#123;</div><div class="line">    <span class="attr">fillStyle</span>: color,</div><div class="line">    <span class="attr">x</span>: x,</div><div class="line">    <span class="attr">y</span>: y,</div><div class="line">    <span class="attr">width</span>: w,</div><div class="line">    <span class="attr">height</span>: h,</div><div class="line">    <span class="attr">fromCenter</span>: <span class="literal">false</span></div><div class="line">&#125;;</div><div class="line">canvas.drawRect(rect);</div></pre></td></tr></table></figure>
<p>From now on, we can forget about JavaScript interop again. We can just use <code>drawBox</code> and implement <code>drawRoom</code> to draw a room, and <code>drawDoor</code> to draw a door: </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Location -&gt; unit</span></div><div class="line"><span class="keyword">let</span> drawRoom location =</div><div class="line">    <span class="keyword">let</span> x, y = toPixel location <span class="keyword">in</span> drawBox ROOM_COLOR x y ROOM_SIZE ROOM_SIZE</div><div class="line"></div><div class="line"><span class="comment">// Location -&gt; Direction -&gt; unit    </span></div><div class="line"><span class="keyword">let</span> drawDoor location direction =</div><div class="line">    <span class="keyword">let</span> x, y = toPixel location</div><div class="line">    <span class="keyword">match</span> direction <span class="keyword">with</span></div><div class="line">    | North -&gt; drawBox DOOR_COLOR x (y - DOOR_SIZE) ROOM_SIZE DOOR_SIZE</div><div class="line">    | South -&gt; drawBox DOOR_COLOR x (y + ROOM_SIZE) ROOM_SIZE DOOR_SIZE</div><div class="line">    | East -&gt; drawBox DOOR_COLOR (x + ROOM_SIZE) y DOOR_SIZE ROOM_SIZE</div><div class="line">    | West -&gt; drawBox DOOR_COLOR (x - DOOR_SIZE) y DOOR_SIZE ROOM_SIZE</div></pre></td></tr></table></figure>
<p><code>Room</code> is drawn as big square, while <code>Door</code> is just a slim rectangle (depends on relation between <code>DOOR_SIZE</code> and <code>ROOM_SIZE</code>). As you can see doors have different shape depending on direction (for example: North vs East).</p>
<p><img src="./maze-5x5.png" alt="5x5"></p>
<p>Now, we need to start traversing the maze:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> action = buildMaze WORLD_WIDTH WORLD_HEIGHT |&gt; Enumerator.create</div></pre></td></tr></table></figure>
<p>You can notice <code>Enumerator</code> here, which might be a little bit cryptic but it just provides slighlty more F#-ish way to use <code>IEnumerable&lt;T&gt;</code> interface. </p>
<p>The last part is the animation loop, we need to draw actions as they come. Let’s schedule a callback every 1/60th of a second (should I use <code>requestAnimationFrame</code> here?) which will take current frame (well… <em>action</em>), draw adequate objects (<code>drawRoom</code> and <code>drawDoor</code>) and then proceed to next <em>action</em> (<code>action &lt;- action |&gt; Option.bind Enumerator.next</code>):</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> cancel = id</div><div class="line">cancel &lt;- Time.interval (<span class="number">1.0</span> / <span class="number">60.0</span>) (<span class="keyword">fun</span> _ -&gt;</div><div class="line">    <span class="keyword">match</span> action |&gt; Option.map Enumerator.value <span class="keyword">with</span></div><div class="line">    | None -&gt; cancel ()</div><div class="line">    | Some (InitAt location) -&gt; </div><div class="line">        drawRoom location</div><div class="line">    | Some (MoveTo (_, direction, location)) -&gt; </div><div class="line">        drawRoom location</div><div class="line">        drawDoor location (opposite direction)</div><div class="line">    action &lt;- action |&gt; Option.bind Enumerator.next </div><div class="line">)</div><div class="line">cancel</div></pre></td></tr></table></figure>
<p>The last line returns <code>cancel</code> (returns a function, but does not call it) from <code>startAnimation</code> so animation can be externally cancelled.<br>Note: <code>Time.interval</code> is just a wrapper for <code>setInterval</code> and <code>clearInterval</code> to have more F#-ish experience:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> Time =</div><div class="line">    <span class="keyword">open</span> Fable.Import.Browser</div><div class="line">    <span class="comment">// float -&gt; (unit -&gt; unit) -&gt; (unit -&gt; unit)</span></div><div class="line">    <span class="keyword">let</span> interval seconds (action: unit -&gt; unit) =</div><div class="line">        <span class="keyword">let</span> disposable = window.setInterval (action, seconds * <span class="number">1000.0</span>)</div><div class="line">        <span class="keyword">fun</span> () -&gt; window.clearInterval(disposable)</div></pre></td></tr></table></figure>
<p>I guess that’s it.</p>
<p>You can find solution on <a href="https://github.com/MiloszKrajewski/fable-daedalus" target="_blank" rel="external">github</a>. It actually has many branches as I was trying many approaches. I started with “Immutable domain with VirtualDOM to generate SVG”, then I switched to “Mutable domain with VirtualDOM to generate SVG paths”, then I switched to “Mutable domain with jCanvas” and then I realized that half of domain was actually needed by VirtualDOM approach only. So, last incarnation if Daedalus is “Mutable mini domain with jCanvas”. </p>
<p>If you want to just see it work, you can find it <a href="https://dl.dropboxusercontent.com/u/317815/daedalus/index.html" target="_blank" rel="external">here</a></p>
<h2 id="Dealing-with-“low-branching-factor”"><a href="#Dealing-with-“low-branching-factor”" class="headerlink" title="Dealing with “low branching factor”"></a>Dealing with “low branching factor”</h2><p>As mentioned DFS has a problem with low branching factor. I’ll try to address the problem in <a href="/2016/09/15/Shaking-maze-generator/">next blogpost</a>.</p>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ul>
<li><a href="https://fable-compiler.github.io/" target="_blank" rel="external">Fable</a></li>
<li><a href="https://webpack.github.io/" target="_blank" rel="external">Webpack</a></li>
<li><a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a></li>
<li><a href="http://ionide.io/" target="_blank" rel="external">Ionide</a></li>
<li><a href="http://cmder.net/" target="_blank" rel="external">Cmder</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Quick-links&quot;&gt;&lt;a href=&quot;#Quick-links&quot; class=&quot;headerlink&quot; title=&quot;Quick links&quot;&gt;&lt;/a&gt;Quick links&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2016/09/15/Shaking
    
    </summary>
    
    
      <category term="fsharp" scheme="http://red-green-rewrite.github.io/tags/fsharp/"/>
    
      <category term="fable" scheme="http://red-green-rewrite.github.io/tags/fable/"/>
    
      <category term="webpack" scheme="http://red-green-rewrite.github.io/tags/webpack/"/>
    
      <category term="algorithm" scheme="http://red-green-rewrite.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Use tee and carry on</title>
    <link href="http://red-green-rewrite.github.io/2016/09/14/Use-apply-and-carry-on/"/>
    <id>http://red-green-rewrite.github.io/2016/09/14/Use-apply-and-carry-on/</id>
    <published>2016-09-14T17:47:16.000Z</published>
    <updated>2016-09-26T15:29:31.383Z</updated>
    
    <content type="html"><![CDATA[<p>Originally, this blogpost was titled “Use apply and carry on”, but I guess naming the function <code>apply</code> after <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/apply.html" target="_blank" rel="external">Kotlin</a> (damn you, Kotlin!) wasn’t the most preferred option by the public. I did like <code>apple |&gt; apply eat</code> semantics but if Scott Wlaschin says <code>apply</code> is a <a href="https://fsharpforfunandprofit.com/posts/elevated-world/#apply" target="_blank" rel="external">different thing</a> then it is a different thing. To be precise Scott’s is <code>apply: (a -&gt; b) -&gt; a -&gt; b</code> and mine <em>was</em> (emphasize on was) <code>apply: (a -&gt; unit) -&gt; a -&gt; a</code>. Apparently, the function which does whatever I wanted <code>apply</code> to do is called <code>tee</code> (<a href="https://fsharpforfunandprofit.com/posts/recipe-part2/" target="_blank" rel="external">after Unix command</a>) or <code>tap</code> (at least in <a href="https://ruby-doc.org/core-2.2.3/Object.html#method-i-tap" target="_blank" rel="external">Ruby</a> and <a href="http://ramdajs.com/docs/#tap" target="_blank" rel="external">Ramda.js</a>).</p>
<p>So I’ve edited it and replaced <code>apply</code> with <code>tee</code>, but essentially it is almost unchanged… Let’s go then.</p>
<hr>
<p>One of everyone’s favourite features of F# is pipe (<code>|&gt;</code>) operator. It allows to pipe output of one function as input to another function preserving <a href="http://theburningmonk.com/2014/12/being-visually-honest-with-f/" target="_blank" rel="external">visual honesty</a>. The general idea is that, in English, we read <em>left-to-right</em> and <em>top-down</em>. In C# (C, C++, Java, Pascal, Python) we read in all possible directions, most likely <em>top-down</em> for overall structure but <em>botton-up</em> and <em>right-to-left</em> for single statements.</p>
<p><img src="http://theburningmonk.com/WordPress/wp-content/uploads/2015/03/visual_dishonesty.png" alt="Visual honesty"></p>
<p>For example:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> y = Math.Round(Math.Exp(Math.Sin(x*<span class="number">5.2</span> + <span class="number">7.1</span>)));</div></pre></td></tr></table></figure>
<p>starts at the <em>right</em> end going <em>left-to-right</em> for a moment (<code>x*5.2 + 7.1</code>) but then turns <em>right-to-left</em> with <code>Math.Sin</code>, <code>Math.Exp</code> and finally <code>Math.Round</code> (in this order). In F# the pipe operator (<code>|&gt;</code>) allows to write code exactly in the same order as it is going to be executed:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> y = x*<span class="number">5.2</span> + <span class="number">7.1</span> |&gt; Math.Sin |&gt; Math.Exp |&gt; Math.Round</div></pre></td></tr></table></figure>
<p>Around the world, many hours have been spent arranging function arguments (guilty!) to allow such seamless experience. But sometimes, the universe is against us. Let’s assume we would like to print out the value after <code>Math.Sin</code>. The conservative approach would be quite intrusive - we would need to break expression in half:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> temp = x*<span class="number">5.2</span> + <span class="number">7.1</span> |&gt; Math.Sin </div><div class="line">printf <span class="string">"%g"</span> temp</div><div class="line"><span class="keyword">let</span> y = temp |&gt; Math.Exp |&gt; Math.Round</div></pre></td></tr></table></figure>
<p>Whoa! That is intrusive. </p>
<p>But here comes the rescue. The <code>tee</code> function implemented as:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> tee func arg = func arg; arg</div></pre></td></tr></table></figure>
<p>The function itself is trivial, it takes a function and an argument, executes given function with given argument but then returns it, so the argument goes through the function: </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> y = x*<span class="number">5.2</span> + <span class="number">7.1</span> |&gt; Math.Sin |&gt; tee (printf <span class="string">"%g"</span>) |&gt; Math.Exp |&gt; Math.Round</div></pre></td></tr></table></figure>
<p>In the example above, the value passed between <code>Math.Sin</code> and <code>Math.Exp</code> has been redirected “for a moment” to <code>printf &quot;%g&quot;</code> without any temporary variables or breaking the flow.</p>
<p>Recently I needed to shuffle an array. The algorithm I used shuffles array in place:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">inline</span> swapInPlace i j (array: <span class="symbol">'a</span>[]) = </div><div class="line">    <span class="keyword">let</span> t = array.[i]</div><div class="line">    array.[i] &lt;- array.[j]</div><div class="line">    array.[j] &lt;- t</div><div class="line"></div><div class="line"><span class="keyword">let</span> shuffleInPlace (array: <span class="symbol">'a</span>[]) =</div><div class="line">    <span class="keyword">for</span> i = array.Length - <span class="number">1</span> <span class="keyword">downto</span> <span class="number">1</span> <span class="keyword">do</span></div><div class="line">        array |&gt; swapInPlace i (Random.randomInt <span class="number">0</span> i)</div></pre></td></tr></table></figure>
<p>(<code>Random.randomInt</code> is not a standard function, but its implementation is irrelevant for this example)</p>
<p>I needed it as pure function, which will not mutate input array, just return shuffled version of it. Let’s do it:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> shuffle array = </div><div class="line">    <span class="keyword">let</span> result = Array.copy array</div><div class="line">    shuffleInPlace result</div><div class="line">    result</div></pre></td></tr></table></figure>
<p>Maybe we can do better with <code>tee</code>? Yes, we can:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> shuffle array = array |&gt; Array.copy |&gt; tee shuffleInPlace</div></pre></td></tr></table></figure>
<p>Much better. </p>
<p>So, <strong>use tee and carry on</strong>!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Originally, this blogpost was titled “Use apply and carry on”, but I guess naming the function &lt;code&gt;apply&lt;/code&gt; after &lt;a href=&quot;https://
    
    </summary>
    
    
      <category term="fsharp" scheme="http://red-green-rewrite.github.io/tags/fsharp/"/>
    
  </entry>
  
  <entry>
    <title>State Machine Construction Kit for F#</title>
    <link href="http://red-green-rewrite.github.io/2016/06/27/State-Machine-Construction-Kit-for-F/"/>
    <id>http://red-green-rewrite.github.io/2016/06/27/State-Machine-Construction-Kit-for-F/</id>
    <published>2016-06-27T00:46:03.000Z</published>
    <updated>2016-09-26T15:29:31.383Z</updated>
    
    <content type="html"><![CDATA[<p><strong>NOTE</strong>: There is a lot of code in this article, as it is repeated and iteratively added. The final version is just 28 lines near the end, but I think you should read the whole thing anyway.</p>
<p>Once upon the time I needed to implement state machine. To not reinvent the wheel I reviewed what’s available: <a href="http://msdn.microsoft.com/en-gb/vstudio/jj684582.aspx" target="_blank" rel="external">Windows Workflow Foundation</a>, <a href="https://github.com/appccelerate/statemachine" target="_blank" rel="external">Appccelerate.StateMachine</a>, <a href="https://code.google.com/p/bbvcommon/wiki/StateMachineTutorial" target="_blank" rel="external">bbv.Common.StateMachine</a>, <a href="https://github.com/nblumhardt/stateless" target="_blank" rel="external">Stateless</a>, <a href="http://simplestatemachine.codeplex.com" target="_blank" rel="external">SimpleStateMachine</a>, <a href="https://code.google.com/p/solid-state" target="_blank" rel="external">Solid.State</a>, and <a href="https://github.com/OmerMor/StateMachineToolkit/tree/master/src/StateMachineToolkit" target="_blank" rel="external">StateMachineToolkit</a>. Windows Workflow Foundation was just scary, apart from the fact that State Machine is not available in .NET 4.0. It didn’t look lightweight either.</p>
<p>None of the others satisfied my requirements either:</p>
<ul>
<li><strong>Events should be able to carry data</strong> - for example, hypothetical event <code>KeyPressed</code> should also carry information which key has been actually pressed;</li>
<li><strong>States should be able hold data</strong> - for example, state collecting key presses (let’s call it <code>EnteringText</code>) should be able to hold a list of keys pressed so far;</li>
<li><strong>Guard statements should have access to both current state and event</strong> - for example, <code>KeyPressed</code> event may cause transition to different state depending which key has been pressed;</li>
<li><strong>Transition rules should be implemented outside states</strong> - states should be more like POCO/DTO object with no logic in them;</li>
</ul>
<p>I’ve implemented it in C#, and I’m relatively happy with it, and you can find it on <a href="https://github.com/MiloszKrajewski/Stateful" target="_blank" rel="external">GitHub</a>. As an exercise I implemented it for <a href="https://kotlinlang.org" target="_blank" rel="external">Kotlin</a> as well, also on <a href="https://github.com/MiloszKrajewski/stateful4k" target="_blank" rel="external">GitHub</a>. Then I had to implement one for work, in Java this time.</p>
<p>I decided that maybe it’s time to do something for F# community, and implement nice functional State Machine Construction Kit. I dropped the “transition rules should be implemented outside states” requirement as it was adding some messy reflection code.</p>
<p>To make it more F#y and functional I started with fundamental question: what is the <code>state</code>? What is its essence?<br>It is actually a function which will take an <code>event</code> and produce new state:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">State</span>&lt;'Event&gt; </span>= 'Event -&gt; State&lt;'Event&gt;</div></pre></td></tr></table></figure>
<p>This would actually not compile, because it would create infinite recursive type alias, but:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">State</span>&lt;'Event&gt; </span>= | State <span class="keyword">of</span> ('Event -&gt; State)</div></pre></td></tr></table></figure>
<p>will do just fine.<br>Actually it would be a little but nicer if it would be possible to return <code>State option</code> to handle termination:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">State</span>&lt;'Event&gt; </span>= | State <span class="keyword">of</span> ('Event -&gt; State option)</div></pre></td></tr></table></figure>
<p>…but, I decided to make it rather with explicit state case:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">State</span>&lt;'Event&gt; </span>=</div><div class="line">    | Next <span class="keyword">of</span> ('Event -&gt; State)</div><div class="line">    | Stop</div></pre></td></tr></table></figure>
<p>So we have transitive state (<code>Next</code> for <code>State (Some state)</code>) and terminal state (<code>Stop</code> for <code>State None</code>).<br>Please note, that we could add more cases, for example:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">State</span>&lt;'Event, 'Result&gt; </span>=</div><div class="line">    | Next <span class="keyword">of</span> ('Event -&gt; State)</div><div class="line">    | Stop <span class="keyword">of</span> 'Result</div><div class="line">    | Fail <span class="keyword">of</span> Exception</div></pre></td></tr></table></figure>
<p>but this would introduce some complexity which I don’t want in this example, but you are more than welcome to introduce yourself.<br>So, let’s go back to my State Machine Construction Kit. We already have a state but we also need a function to fire events and transition from state to state, let’s call it <code>feed</code>, we feed a state with event. It’s actually almost done as state is a transition function:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> feed state event =</div><div class="line">    <span class="keyword">match</span> state <span class="keyword">with</span></div><div class="line">    | Stop -&gt; failwith <span class="string">"Terminal state reached"</span></div><div class="line">    | Next handler -&gt; event |&gt; handler</div></pre></td></tr></table></figure>
<p>For this example I will use some trivial state machine handling opening and closing doors:</p>
<p><img src="https://github.com/MiloszKrajewski/stateful4k/raw/master/doc/basic-door-machine.png" alt="simple door state machine"></p>
<p>So we have <code>Open</code> and <code>Close</code> events:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">Event</span> </span>= | Open | Close</div></pre></td></tr></table></figure>
<p>…and have two states: <code>opened</code> and <code>closed</code>. The states themselves are functions which take events and produce new states:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">rec</span> opened event =</div><div class="line">    <span class="keyword">match</span> event <span class="keyword">with</span></div><div class="line">    | Open -&gt; Next opened</div><div class="line">    | Close -&gt; printfn <span class="string">"closing"</span>; Next closed</div><div class="line"><span class="keyword">and</span> closed event =</div><div class="line">    <span class="keyword">match</span> event <span class="keyword">with</span></div><div class="line">    | Open -&gt; printfn <span class="string">"opening"</span>; Next opened</div><div class="line">    | Close -&gt; Next closed</div></pre></td></tr></table></figure>
<p>Let’s define an initial state, a let’s say it is <code>closed</code>:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> state = Next closed</div></pre></td></tr></table></figure>
<p>Now we can send <code>Open</code> event to it and store new state:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">state &lt;- Open |&gt; feed state</div></pre></td></tr></table></figure>
<p>Ta-dah! Done.</p>
<p>Please note, that to handle sequence of events easily, the only thing you need to is to use <code>fold</code>:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">events |&gt; Seq.fold feed state</div></pre></td></tr></table></figure>
<p>For my personal use I actually created a class to encapsulate mutability. It is, of course, still there but hidden:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">StateMachine</span>&lt;'Event&gt;</span>(initial: State&lt;'Event&gt;) =</div><div class="line">    <span class="keyword">let</span> <span class="keyword">mutable</span> current = initial</div><div class="line">    <span class="keyword">member</span> this.Feed event =</div><div class="line">        current &lt;- feed current event</div><div class="line">    <span class="keyword">member</span> this.IsStopped</div><div class="line">        <span class="keyword">with</span> get () = <span class="keyword">match</span> current <span class="keyword">with</span> | Stop -&gt; <span class="keyword">true</span> | _ -&gt; <span class="keyword">false</span></div></pre></td></tr></table></figure>
<p>What about context (data shared by all states) and state’s state (state internal data) you might ask? By the power of closures and currying there is nothing special to implement. For example, let’s imagine a door state machine which makes sounds (with injected sound emitter) and can be locked or unlocked when closed (state’s internal data):</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">Event</span> </span>= | Open | Close | Lock | Unlock</div><div class="line"></div><div class="line"><span class="keyword">let</span> configureDoor sound =</div><div class="line">    <span class="keyword">let</span> <span class="keyword">rec</span> opened event =</div><div class="line">        <span class="keyword">match</span> event <span class="keyword">with</span></div><div class="line">        | Close -&gt; sound <span class="string">"bang"</span>; Next (closed <span class="keyword">false</span>)</div><div class="line">        | Lock -&gt; sound <span class="string">"clack"</span>; Next opened</div><div class="line">        | _ -&gt; Next opened</div><div class="line">    <span class="keyword">and</span> closed locked event =</div><div class="line">        <span class="keyword">match</span> event <span class="keyword">with</span></div><div class="line">        | Open <span class="keyword">when</span> locked -&gt; sound <span class="string">"dumdum"</span>; Next (closed locked)</div><div class="line">        | Open -&gt; sound <span class="string">"squeak"</span>; Next opened</div><div class="line">        | Lock -&gt; sound <span class="string">"click"</span>; Next (closed <span class="keyword">true</span>)</div><div class="line">        | Unlock -&gt; sound <span class="string">"clack"</span>; Next (closed <span class="keyword">false</span>)</div><div class="line">        | _ -&gt; Next (closed locked)</div><div class="line">    Next (closed <span class="keyword">false</span>)</div></pre></td></tr></table></figure>
<p>Note, there is a <code>sound</code> function passed and all states have access to it and this is your context. Additionally <code>closed</code> state has a <code>locked</code> ‘property’ and behaves differently depending on the value is this property (cannot be opened when closed, and needs to be unlocked first). You can call it substate if you want.</p>
<p>What if I don’t like mutable variables and I want my state machine to be an actor / agent? Let’s just wrap it:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> createAgent initial =</div><div class="line">    MailboxProcessor.Start (<span class="keyword">fun</span> inbox -&gt;</div><div class="line">        <span class="keyword">let</span> <span class="keyword">rec</span> loop state = async &#123;</div><div class="line">            <span class="keyword">let!</span> event = inbox.Receive ()</div><div class="line">            <span class="keyword">match</span> event |&gt; feed state <span class="keyword">with</span></div><div class="line">            | Stop -&gt; ()</div><div class="line">            | Next _ <span class="keyword">as</span> next -&gt; <span class="keyword">return!</span> loop next</div><div class="line">        &#125;</div><div class="line">        loop initial</div><div class="line">    )</div></pre></td></tr></table></figure>
<p>So, the full module, already a little bit bloated with helper functions, is:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> StateMachine =</div><div class="line">    <span class="class"><span class="keyword">type</span> <span class="title">State</span>&lt;'Event&gt; </span>=</div><div class="line">        | Next <span class="keyword">of</span> ('Event -&gt; State&lt;'Event&gt;)</div><div class="line">        | Stop</div><div class="line"></div><div class="line">    <span class="keyword">let</span> feed state event =</div><div class="line">        <span class="keyword">match</span> state <span class="keyword">with</span></div><div class="line">        | Stop -&gt; failwith <span class="string">"Terminal state reached"</span></div><div class="line">        | Next handler -&gt; event |&gt; handler</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">type</span> <span class="title">StateMachine</span>&lt;'event&gt;</span>(initial: State&lt;'event&gt;) =</div><div class="line">        <span class="keyword">let</span> <span class="keyword">mutable</span> current = initial</div><div class="line">        <span class="keyword">member</span> this.Fire event = current &lt;- feed current event</div><div class="line">        <span class="keyword">member</span> this.IsStopped</div><div class="line">            <span class="keyword">with</span> get () = <span class="keyword">match</span> current <span class="keyword">with</span> | Stop -&gt; <span class="keyword">true</span> | _ -&gt; <span class="keyword">false</span></div><div class="line"></div><div class="line">    <span class="keyword">let</span> createMachine initial = StateMachine(initial)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> createAgent initial =</div><div class="line">        MailboxProcessor.Start (<span class="keyword">fun</span> inbox -&gt;</div><div class="line">            <span class="keyword">let</span> <span class="keyword">rec</span> loop state = async &#123;</div><div class="line">                <span class="keyword">let!</span> event = inbox.Receive ()</div><div class="line">                <span class="keyword">match</span> event |&gt; feed state <span class="keyword">with</span></div><div class="line">                | Stop -&gt; ()</div><div class="line">                | Next _ <span class="keyword">as</span> next -&gt; <span class="keyword">return!</span> loop next</div><div class="line">            &#125;</div><div class="line">            loop initial</div><div class="line">        )</div></pre></td></tr></table></figure>
<p>I can run this now with:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> agent = printfn <span class="string">"%s"</span> |&gt; configureDoor |&gt; StateMachine.createAgent</div><div class="line">agent.Post Lock <span class="comment">// click</span></div><div class="line">agent.Post Unlock <span class="comment">// clack</span></div><div class="line">agent.Post Open <span class="comment">// squeak</span></div><div class="line">agent.Post Close <span class="comment">// bang</span></div></pre></td></tr></table></figure>
<p>I have to admit. I failed. There is no such thing as State Machine Construction Kit for F#, at least not the one worth releasing, in short, there is just a function:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">StateMachineConstructionKit</span> </span>= 'State -&gt; 'Event -&gt; 'State</div></pre></td></tr></table></figure>
<p>but I just can’t put it on GitHub. Maybe <a href="https://gist.github.com/MiloszKrajewski/b0a2668ab10d8b567b89b1b078c02a2f#file-statemachine-fs" target="_blank" rel="external">gist</a>?</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: There is a lot of code in this article, as it is repeated and iteratively added. The final version is just 28 line
    
    </summary>
    
    
      <category term="fsharp" scheme="http://red-green-rewrite.github.io/tags/fsharp/"/>
    
      <category term="state-machine" scheme="http://red-green-rewrite.github.io/tags/state-machine/"/>
    
  </entry>
  
  <entry>
    <title>A perfect square kata</title>
    <link href="http://red-green-rewrite.github.io/2016/05/17/A-perfect-square-kata/"/>
    <id>http://red-green-rewrite.github.io/2016/05/17/A-perfect-square-kata/</id>
    <published>2016-05-17T15:44:09.000Z</published>
    <updated>2016-09-26T15:29:31.373Z</updated>
    
    <content type="html"><![CDATA[<p>I was doing some katas on <a href="http://www.codewars.com/" target="_blank" rel="external">CodeWars</a> recently, and some of them were involving <a href="https://en.wikipedia.org/wiki/Square_number" target="_blank" rel="external">perfect square numbers</a>. In short, perfect square number is an integer which square root is also an integer, like 9, 16, 25, and 36.</p>
<p>Anyway, solutions which got most votes in both categories, <em>best practice</em> and <em>clever</em> use:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsPerfectSquare</span>(<span class="params"><span class="keyword">long</span> number</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> Math.Sqrt(number) % <span class="number">1</span> == <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This is kind of clever, as .NET (surprisingly) does not provide <code>double Math.Frac(double)</code>, which would need to be implemented as:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">Frac</span>(<span class="params"><span class="keyword">double</span> number</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> number - Math.Floor(number);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>But is it correct (best practice) at all?</strong></p>
<p>Every time you see equals (<code>==</code>) used with floating point types the red light should go off in your head. Equality and floating point numbers do not work well together. Floating point numbers are usually greater (or equal) than (<code>&gt;</code> or <code>&gt;=</code>), less (or equal) than (<code>&lt;</code> or <code>&lt;=</code>), or within particular range (<code>Math.Abs(x - y) &lt;= Epsilon</code>), but they are rarely equal (<code>==</code>). At least you should not rely on that.</p>
<p>Just try that:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0.0</span>;</div><div class="line">Debug.Assert(sum == <span class="number">0.0</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) sum += <span class="number">0.1</span>;</div><div class="line">Debug.Assert(sum == <span class="number">100</span>*<span class="number">0.1</span>); <span class="comment">// FAIL! 9.99999999999998 != 10</span></div></pre></td></tr></table></figure>
<p>So I know that <em>clever</em> implementation of <code>IsPerfectSquare</code> is potentially flawed, but as a true wannabe skeptic, I also know that experiment beats theory. I decided to find what is the smallest <em>not so perfect square number</em> which will deceive this method and force it to provide <em>false positive</em>.<br>The best bet is a number which is <em>true perfect square plus 1</em>, so:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsPerfectSquare</span>(<span class="params"><span class="keyword">long</span> number</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> Math.Sqrt(number) % <span class="number">1</span> == <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1</span>; i &lt; <span class="keyword">int</span>.MaxValue; i++) &#123;</div><div class="line">        <span class="keyword">var</span> fake = i*i + <span class="number">1</span>; <span class="comment">// fake perfect square</span></div><div class="line">        <span class="keyword">if</span> (IsPerfectSquare(fake)) &#123;</div><div class="line">            Console.WriteLine(<span class="string">"&#123;0&#125; is the smallest fake perfect square"</span>, fake);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>…and we have an answer in below 3s:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">4503599627370497 is the smallest fake perfect square</div></pre></td></tr></table></figure>
<p>which is <code>67108864^2 + 1</code>.</p>
<p>How can we implement <code>IsPerfectSquare</code> properly then?</p>
<p>For square roots in integer domain we should probably use <a href="http://stackoverflow.com/questions/1100090/looking-for-an-efficient-integer-square-root-algorithm-for-arm-thumb2" target="_blank" rel="external">dedicated algorithm</a> but because this is outside of the scope here (and outside the scope of this kata, I suppose) we need to think how to make <code>Math.Sqrt(...)</code> work for us.</p>
<p>We need to bring the equality test back to integer domain. So, even if we use floating point numbers to calculate square root, we will perform the test itself using integers.</p>
<p>Let’s get the integer (rounded) “square root candidate” first:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> root = (<span class="keyword">long</span>)Math.Sqrt(number);</div></pre></td></tr></table></figure>
<p>…and then test if it is really is a square root of given number:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> root*root == number;</div></pre></td></tr></table></figure>
<p>That’s it. Not much more code. There was really no reason to sacrifice correctness for “cleverness”.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsPerfectSquare</span>(<span class="params"><span class="keyword">long</span> number</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> root = (<span class="keyword">long</span>)Math.Sqrt(number);</div><div class="line">    <span class="keyword">return</span> root*root == number;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>As a bonus we can also check if rounding might be a problem leading to <em>false negatives</em>:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> max = (<span class="keyword">long</span>)<span class="keyword">int</span>.MaxValue;</div><div class="line">Debug.Assert((<span class="keyword">long</span>)Math.Sqrt(max*max) == max); <span class="comment">// SUCCESS!</span></div></pre></td></tr></table></figure>
<p>…and it (most likely) won’t.<br>Of course, this approach will stop working at some point:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> number = <span class="keyword">new</span> BigInteger(<span class="keyword">long</span>.MaxValue);</div><div class="line"><span class="keyword">var</span> square = number*number;</div><div class="line"><span class="keyword">var</span> root = <span class="keyword">new</span> BigInteger(Math.Sqrt((<span class="keyword">double</span>)square));</div><div class="line">Debug.Assert(root == number); <span class="comment">// FAIL!</span></div></pre></td></tr></table></figure>
<p>…but that’s different story.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I was doing some katas on &lt;a href=&quot;http://www.codewars.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodeWars&lt;/a&gt; recently, and some of them were 
    
    </summary>
    
    
      <category term="kata" scheme="http://red-green-rewrite.github.io/tags/kata/"/>
    
      <category term="csharp" scheme="http://red-green-rewrite.github.io/tags/csharp/"/>
    
  </entry>
  
</feed>
