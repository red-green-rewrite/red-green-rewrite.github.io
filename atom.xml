<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Red, Green, Rewrite</title>
  <subtitle>the tales about software development</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://red-green-rewrite.github.io/"/>
  <updated>2016-10-31T04:01:01.476Z</updated>
  <id>http://red-green-rewrite.github.io/</id>
  
  <author>
    <name>Milosz Krajewski</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kruskal/DFS hybrid with reduced branching factor</title>
    <link href="http://red-green-rewrite.github.io/2016/10/30/Kruskal-DFS-hybrid-with-reduced-branching-factor/"/>
    <id>http://red-green-rewrite.github.io/2016/10/30/Kruskal-DFS-hybrid-with-reduced-branching-factor/</id>
    <published>2016-10-30T19:38:06.000Z</published>
    <updated>2016-10-31T04:01:01.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-links"><a href="#Quick-links" class="headerlink" title="Quick links"></a>Quick links</h2><ul>
<li><a href="/2016/09/14/Maze-generator-with-Fable/">Randomized depth-first search</a></li>
<li><a href="/2016/09/15/Shaking-maze-generator/">Randomized depth-first search with stack shaking</a></li>
<li><a href="/2016/09/26/Maze-generator-again-but-this-time-with-Scala-js/">Random spanning tree with Prim’s algorithm</a></li>
<li><a href="/2016/10/06/Kruskal-Kotlin-and-Hex-Tiles/">Random spanning tree using Kruskal’s algorithm</a></li>
<li><a href="/2016/10/30/Kruskal-DFS-hybrid-with-reduced-branching-factor/">Hybrid of depth-first search and Kruskal’s algorithm</a></li>
<li><a href="https://github.com/MiloszKrajewski/kotlinjs-hexagen-hybrid" target="_blank" rel="external">Source code</a></li>
<li><a href="/kotlinjs-hexagen-hybrid/index.html">Online demo</a></li>
</ul>
<h2 id="Read-original-blog-post-first"><a href="#Read-original-blog-post-first" class="headerlink" title="Read original blog-post first"></a>Read original blog-post first</h2><p>This is just an update to previous blog-post titled <a href="/2016/10/06/Kruskal-Kotlin-and-Hex-Tiles/">Kruskal, Kotlin, and Hex Tiles</a>. I assume you read it, otherwise some things may not make sense.</p>
<h2 id="Problem-with-“pure”-algorithms"><a href="#Problem-with-“pure”-algorithms" class="headerlink" title="Problem with “pure” algorithms"></a>Problem with “pure” algorithms</h2><p>We already tried <a href="/2016/09/14/Maze-generator-with-Fable/">Depth-First Search</a> and <a href="/2016/10/06/Kruskal-Kotlin-and-Hex-Tiles/">Kruskal’s algorithm</a>. They both have some disadvantages. Depth-First Search has low branching factor, meaning that is does not branch unless it gets stuck, so it actually can create one very long path through the whole maze to the point where it is hard to call it “maze” anymore.<br>On the other side there is Kruskal’s algorithms which is all about branching. The problem with branching is that even if it creates a dead-end the length of dead-end branch is quite often low (let’s say one or two “rooms”) and is very easy to spot.<br>The “challenge” was to create algorithm which is a hybrid of Depth-First Search and Kruskal’s algorithm.</p>
<p><img src="/images/maze/kruskal-original.png" alt="Original Kruskal&#39;s algorithm. Branches, branches everywhere"></p>
<h2 id="A-Trailblazer-algorithm"><a href="#A-Trailblazer-algorithm" class="headerlink" title="A Trailblazer algorithm"></a>A Trailblazer algorithm</h2><p>For this I needed a DFS algorithm using the same domain model as previously implemented Kruskal’s algorithm. It assumed existence of nodes and edges, having no constraint on node (vertex) and expecting edge to be a pair of nodes (vertices):</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Edge</span>&lt;<span class="type">N</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">val</span> A: N</div><div class="line">    <span class="keyword">val</span> B: N</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Algorithm itself had very simple interface, it was taking a sequence of edges (most likely randomized), and provided a method called <code>next()</code> returning next edge forming spanning tree. Please note that in languages with generators (<a href="https://blog.jetbrains.com/kotlin/2016/04/kotlin-post-1-0-roadmap/" target="_blank" rel="external">Kotlin is not blessed with them, yet</a>) it could be implemented as function taking a sequence of edges (<code>Sequence&lt;E&gt;</code>) and a returning sequence of edges (<code>Sequence&lt;E&gt;</code>). It had to define method <code>next()</code> instead which just returns next edge (equivalent of <code>yield return</code>) or null (kind-of <code>yield break</code>) if no more edges can be found:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kruskal</span>&lt;<span class="type">N, E : Edge&lt;N</span>&gt;&gt;</span>(edges: Sequence&lt;E&gt;) &#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: E? &#123;</div><div class="line">        <span class="comment">// implementation</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This algorithm will have similar interface (although there is no explicitly defined <code>interface</code>) returning sequence of edges:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trailblazer</span>&lt;<span class="type">N, E : Edge&lt;N</span>&gt;&gt;</span>(...) &#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: E? &#123;</div><div class="line">        <span class="comment">// implementation</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>I called it <code>Trailblazer</code> because it is not exactly a Depth-First Search as it does not have backtracking. Backtracking in DFS is used to handle dead-ends (by branching), while in this hybrid algorithm branching is handled by Kruskal’s algorithm, so trailblazer is expected to just push forward.</p>
<p>There is a slight impedance between model used by Kruskal’s algorithm and Trailblazer, so the latter will use some helper methods to adapt:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trailblazer</span>&lt;<span class="type">N, E : Edge&lt;N</span>&gt;&gt;</span>(edges: (N) -&gt; Sequence&lt;E&gt;) &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">val</span> edges = edges</div><div class="line">    <span class="keyword">private</span> <span class="keyword">val</span> visited = mutableSetOf&lt;N&gt;()</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> head: N? = <span class="literal">null</span></div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>it will need a function (<code>edges</code>) which will provide sequence of edges going out of given node. It will need a set of already visited nodes (<code>visited</code>) and current location (<code>head</code>).</p>
<p>Edges in “Kruskal’s” model are just a pairs of nodes, while for Trailblazer direction is very important. Therefore we will need a method to find “opposite end” of an edge:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">opposite</span><span class="params">(node: <span class="type">N</span>, edge: <span class="type">E</span>)</span></span>: N? =</div><div class="line">        <span class="keyword">when</span> (node) &#123;</div><div class="line">            edge.A -&gt; edge.B</div><div class="line">            edge.B -&gt; edge.A</div><div class="line">            <span class="keyword">else</span> -&gt; <span class="literal">null</span></div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>we will also need mark visited nodes and optionally move <code>head</code> to newly visited one. This method will also return <code>true</code> if node has been just added (meaning has not been visited before):</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">visit</span><span class="params">(node: <span class="type">N</span>, reset: <span class="type">Boolean</span> = <span class="literal">false</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</div><div class="line">    <span class="keyword">val</span> added = visited.add(node)</div><div class="line">    <span class="keyword">if</span> (reset &amp;&amp; added) head = node</div><div class="line">    <span class="keyword">return</span> added</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This does not look pretty, I have to admit, but it helped keep <code>next</code> method quite short:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: E? &#123;</div><div class="line">    <span class="keyword">val</span> current = head ?: <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">    <span class="keyword">return</span> edges(current).firstOrNull &#123; visit(opposite(current, it)!!, <span class="literal">true</span>) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>I actually like <code>val current = head ?: return null</code> syntax. Kotlin allow you to put control statements like <code>return</code>, <code>break</code> and <code>continue</code> in places where you would expect expressions, when it makes expression value irrelevant. In this case it will extract value from nullable <code>head</code> and put it into <code>current</code>, or it will exit this method returning <code>null</code> immediately. It’s kind-of “something or die()” in PHP.<br>After that, it takes all <code>edges</code> going out of <code>current</code> node and finds first which <code>opposite</code> end has not been visited yet. So it is exactly like DFS, it just does not have backtracking.</p>
<h2 id="Bind-two-algorithms-together"><a href="#Bind-two-algorithms-together" class="headerlink" title="Bind two algorithms together"></a>Bind two algorithms together</h2><p>These two (Kruskal and Trailblazer) algorithms will have to work together, and they need to expose some methods for communication.<br>First, Kruskal, needs to expose ability to merge node sets (it is the most important concepts in Kruskal’s algorithm, so if you don’t know what I’m talking about please refer to <a href="/2016/10/06/Kruskal-Kotlin-and-Hex-Tiles/">previous blog-post</a>):</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kruskal</span>&lt;<span class="type">N, E : Edge&lt;N</span>&gt;&gt;</span>(...) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">merge</span><span class="params">(a: <span class="type">N</span>, b: <span class="type">N</span>)</span></span> = sets.merge(a, b)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>On the other side of the fence, Trailblazer algorithm will need to be restarted every time Kruskal jumps from one location to another: </p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trailblazer</span>&lt;<span class="type">N, E : Edge&lt;N</span>&gt;&gt;</span>(...) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">reset</span><span class="params">(node: <span class="type">N</span>)</span></span> &#123; head = node &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>That’s all we need.</p>
<p>Let’s do the <code>Hybrid</code> algorithm now. It will use the same “interface”, of course:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hybrid</span>&lt;<span class="type">N, E : Edge&lt;N</span>&gt;&gt;</span>(edges: Sequence&lt;E&gt;, threshold: <span class="built_in">Double</span>, rng: () -&gt; <span class="built_in">Double</span>) &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">val</span> rng = rng</div><div class="line">    <span class="keyword">private</span> <span class="keyword">val</span> threshold = threshold</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: E? = <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>On top of usual stuff (sequence of edges) it will also take random number generator (<code>rng</code>) and a <code>threshold</code> which will control how biased towards Trailblazer (<code>0.0</code>) or Kruskal (<code>1.0</code>) it will be.</p>
<p>It will also need a function returning outgoing edges for Trailblazer. Let’s start with building a dictionary (map) of all edges:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">val</span> map = mapEdges(edges)</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">mapEdges</span><span class="params">(edges: <span class="type">Sequence</span>&lt;<span class="type">E</span>&gt;)</span></span>: Map&lt;N, List&lt;E&gt;&gt; &#123;</div><div class="line">    <span class="keyword">val</span> result = mutableMapOf&lt;N, MutableList&lt;E&gt;&gt;()</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">link</span><span class="params">(node: <span class="type">N</span>, edge: <span class="type">E</span>)</span></span> = result.getOrPut(node, &#123; mutableListOf() &#125;).add(edge)</div><div class="line">    <span class="keyword">for</span> (edge <span class="keyword">in</span> edges) &#123;</div><div class="line">        link(edge.A, edge)</div><div class="line">        link(edge.B, edge)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>It goes through all <code>edges</code> and for both ends (nodes <code>A</code> and <code>B</code>) adds this edge as outgoing (<code>link</code>). So, the <code>result</code> is a dictionary from nodes to list of edges (<code>Map&lt;N, List&lt;E&gt;&gt;</code>). There might be an important question to ask here, if those lists need to be shuffled again, but I assume that input sequence was already shuffled, so shuffling already shuffled sequence does not increase its randomness. Although, in this case, there is a chance I’m completely wrong.  </p>
<p>We can use this dictionary to define function needed by Trailblazer algorithm (see Trailblazer’s constructor):</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getEdges</span><span class="params">(node: <span class="type">N</span>)</span></span>: Sequence&lt;E&gt; =</div><div class="line">        map[node]?.asSequence() ?: emptySequence&lt;E&gt;()</div></pre></td></tr></table></figure>
<p>All those question marks are to handle potential misses (and propagate nulls instead of throwing exceptions). So, what this function does is finds a node in dictionary and returns a sequence of edges incidental to this node or, in case node was not in dictionary, it return empty sequence.</p>
<p>Hybrid algorithm encapsulates both algorithms, original <code>Kruskal</code> and <code>Trailblazer</code> algorithms:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">val</span> kruskal = Kruskal(edges)</div><div class="line"><span class="keyword">private</span> <span class="keyword">val</span> trailblazer = Trailblazer(&#123; node: N -&gt; getEdges(node) &#125;)</div></pre></td></tr></table></figure>
<p>it also combines <code>next</code> functions from both:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: E? = nextTrailblazer() ?: nextKruskal()</div></pre></td></tr></table></figure>
<p>which means: try Trailblazer first, and if it fails, try Kruskal’s. If both of them failed then that’s it.<br>First let’s implement about <code>nextTrailblazer</code>:  </p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">nextTrailblazer</span><span class="params">()</span></span>: E? =</div><div class="line">        (<span class="keyword">if</span> (rng() &lt; threshold) <span class="literal">null</span> <span class="keyword">else</span> trailblazer.next())?.apply &#123;</div><div class="line">            kruskal.merge(A, B)</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>As you can see, it makes a call if it should use Trailblazer algorithm in this step at all. For example, if <code>threshold</code> is set to <code>0.1</code> there is a 10% chance on every step that Trailblazer will stop and switch back to Kruskal. Therefore for <code>threshold</code> set to <code>1.0</code> it would be working exactly like original Kruskal and Trailblazer’s step would never be executed. For <code>threshold</code> set to <code>0.0</code> it would strongly prefer Trailblazer switching to Kruskal only when Trailblazer hit dead-end.<br>If it decided to use Trailblazer and Trailblazer actually found an edge, both ends of this edge are added to Kruskal’s disjoint-set, making Kruskal’s part of the algorithm aware of this edge being returned.</p>
<p>On the other side, <code>nextKruskal</code> is implemented as follows:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">nextKruskal</span><span class="params">()</span></span>: E? =</div><div class="line">        kruskal.next()?.apply &#123;</div><div class="line">            trailblazer.visit(A)</div><div class="line">            trailblazer.visit(B)</div><div class="line">            trailblazer.reset(<span class="keyword">if</span> (rng() &lt; <span class="number">0.5</span>) A <span class="keyword">else</span> B)</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>It takes next edge from Kruskal’s algorithm and if it succeeded, adds marks both ends as visited for Trailblazer algorithm and resets Trailblazer’s starting location.</p>
<h2 id="The-presentation-layer"><a href="#The-presentation-layer" class="headerlink" title="The presentation layer"></a>The presentation layer</h2><p>There is not really too much to do in presentation layer, there are two lines which have been modified. Actually, it’s still one line too much. If <code>Kruskal</code> and <code>Hybrid</code> implemented same interface from the start it would just one line, but adding interface now is a little bit too late - I just want to make it run. Anyway, it there was an interface it would be <code>interface Sequencer&lt;T&gt; { fun next(): T? }</code>.</p>
<p>So, the lines we need to change:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// here: Kruskal -&gt; Hybrid</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">animate</span><span class="params">(algorithm: <span class="type">Hybrid</span>&lt;<span class="type">Tile</span>, Door&gt;)</span></span> &#123;</div><div class="line">    algorithm.next()?.apply &#123;</div><div class="line">        paint(context)</div><div class="line">        handle = window.setTimeout(&#123; animate(algorithm) &#125;, <span class="number">0</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> KRUSKAL_BIAS = <span class="number">0.1</span> <span class="comment">// new constant to control bias</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">launch</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// ...and here: Kruskal -&gt; Hybrid</span></div><div class="line">    animate(Hybrid(</div><div class="line">            buildWorld(WORLD_WIDTH, WORLD_HEIGHT).shuffled(), </div><div class="line">            KRUSKAL_BIAS, &#123; Math.random() &#125;))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h2><p>It seems that it does exactly what I intended. That’s how it looks after few steps:</p>
<p><img src="/images/maze/kruskal-hybrid.png" alt="Hybrid algorithm generates longer isolated paths"></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I really liked <a href="https://en.wikipedia.org/wiki/Open/closed_principle" target="_blank" rel="external">OCP</a> in action. I mean, it did require one line to be added to Kruskal’s algorithm to make it work, but arguably <code>merge</code> method should be exposed from the beginning or disjoint-set (<code>sets</code>) should be injected into it. Anyway, <code>Kruskal</code> class has been completely reused, and new algorithm (<code>Hybrid</code>) composes <code>Kruskal</code> and pseudo-DFS (<code>Trailblazer</code>) quite nicely. I could polish it a little bit, but I think it is good-enough. </p>
<h2 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h2><p>You can find sources <a href="https://github.com/MiloszKrajewski/kotlinjs-hexagen-hybrid" target="_blank" rel="external">here</a> or you can just use <a href="/kotlinjs-hexagen-hybrid/index.html">online demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Quick-links&quot;&gt;&lt;a href=&quot;#Quick-links&quot; class=&quot;headerlink&quot; title=&quot;Quick links&quot;&gt;&lt;/a&gt;Quick links&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2016/09/14/Maze-ge
    
    </summary>
    
    
      <category term="maze" scheme="http://red-green-rewrite.github.io/tags/maze/"/>
    
      <category term="kotlin" scheme="http://red-green-rewrite.github.io/tags/kotlin/"/>
    
      <category term="kotlin.js" scheme="http://red-green-rewrite.github.io/tags/kotlin-js/"/>
    
      <category term="algorithm" scheme="http://red-green-rewrite.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Kruskal, Kotlin, and Hex Tiles</title>
    <link href="http://red-green-rewrite.github.io/2016/10/06/Kruskal-Kotlin-and-Hex-Tiles/"/>
    <id>http://red-green-rewrite.github.io/2016/10/06/Kruskal-Kotlin-and-Hex-Tiles/</id>
    <published>2016-10-06T19:53:50.000Z</published>
    <updated>2016-10-31T03:11:52.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-links"><a href="#Quick-links" class="headerlink" title="Quick links"></a>Quick links</h2><ul>
<li><a href="/2016/09/14/Maze-generator-with-Fable/">Randomized depth-first search</a></li>
<li><a href="/2016/09/15/Shaking-maze-generator/">Randomized depth-first search with stack shaking</a></li>
<li><a href="/2016/09/26/Maze-generator-again-but-this-time-with-Scala-js/">Random spanning tree with Prim’s algorithm</a></li>
<li><a href="/2016/10/06/Kruskal-Kotlin-and-Hex-Tiles/">Random spanning tree using Kruskal’s algorithm</a></li>
<li><a href="/2016/10/30/Kruskal-DFS-hybrid-with-reduced-branching-factor/">Hybrid of depth-first search and Kruskal’s algorithm</a></li>
<li><a href="https://github.com/MiloszKrajewski/kotlinjs-hexagen" target="_blank" rel="external">Source code</a></li>
<li><a href="/kotlinjs-hexagen/index.html">Online demo</a></li>
</ul>
<h2 id="One-more-time…"><a href="#One-more-time…" class="headerlink" title="One more time…"></a>One more time…</h2><p>So the next approach, after <a href="/2016/09/14/Maze-generator-with-Fable/">Randomized depth-first search</a>, <a href="/2016/09/15/Shaking-maze-generator/">Randomized depth-first search with stack shaking</a>, <a href="/2016/09/26/Maze-generator-again-but-this-time-with-Scala-js/">Random spanning tree with Prim’s algorithm</a>, to maze generation is <strong>Kruskal’s algorithm</strong>. Technically, it’s still the same thing: random spanning tree, it’s just different approach. This time the new tech to try was: <a href="https://kotlinlang.org/" target="_blank" rel="external">Kotlin</a> and <a href="https://github.com/pugjs/pug" target="_blank" rel="external">Jade/Pug</a>. I didn’t do too much Jade, I just wanted to try, but I have to say again: Kotlin… good stuff. </p>
<h2 id="The-algorithm"><a href="#The-algorithm" class="headerlink" title="The algorithm"></a>The algorithm</h2><p>Kruskal algorithm, is quite simple to describe:</p>
<ul>
<li>Take edge with lowest weight<ul>
<li>if it would form a cycle, ignore it</li>
<li>otherwise, add it to solution</li>
</ul>
</li>
<li>if there are still edges left, repeat</li>
</ul>
<p>To apply Kruskal’s algorithm to maze generation we don’t need to do “minimum spanning tree” as “random spanning tree” is enough. So “take edge with lowest weight* should be replaced with “take any edge”. To achieve that we can just shuffle all the edges before feeding them to the algorithm. Let’s write a <code>shuffle</code> method to shuffle array in-place, and <code>shuffled</code> function returning a shuffled version of given sequence:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> MutableList<span class="type">&lt;T&gt;</span>.<span class="title">swap</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> t = <span class="keyword">this</span>[x]</div><div class="line">    <span class="keyword">this</span>[x] = <span class="keyword">this</span>[y]</div><div class="line">    <span class="keyword">this</span>[y] = t</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> MutableList<span class="type">&lt;T&gt;</span>.<span class="title">shuffle</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">random</span><span class="params">(range: <span class="type">Int</span>)</span></span> = Math.floor((Math.random() * range) + <span class="number">1.0</span>)</div><div class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> size - <span class="number">1</span> downTo <span class="number">0</span>) swap(i, random(i))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Sequence<span class="type">&lt;T&gt;</span>.<span class="title">shuffled</span><span class="params">()</span></span>: Sequence&lt;T&gt; =</div><div class="line">        <span class="keyword">this</span>.toMutableList().apply &#123; shuffle() &#125;.asSequence()</div></pre></td></tr></table></figure>
<p><em>NOTE</em>: If you are unfamiliar with Kotlin it might a little bit obscure. All three methods above are extension methods (familiar for C# users), and for all of them <em>this</em> is implicitly pointing to the object they have been executed for. So, <code>this[x]</code> (in <code>swap</code>) is accessing element <code>x</code> in <code>MutableList</code>, <code>size</code> (in <code>shuffle</code>) is the length of <code>MutableList</code>. Extension method <code>apply</code> is a <a href="/2016/09/14/Use-apply-and-carry-on/">different story</a>. </p>
<p>The only challenge is “cycle detection”. I used disjoint-set data structure, and I strongly recommend reading my other <a href="/2016/09/30/Curious-case-of-disjoint-set/">blogpost</a>.</p>
<p>For Kruskal’s algorithm we need to define an <code>Edge</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Edge</span>&lt;<span class="type">N</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">val</span> A: N</div><div class="line">    <span class="keyword">val</span> B: N</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>which is just an entity connecting two nodes, <code>A</code> and <code>B</code>. The algorithm itself is very simple:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kruskal</span>&lt;<span class="type">N, E : Edge&lt;N</span>&gt;&gt;</span>(edges: Sequence&lt;E&gt;) &#123;</div><div class="line">    <span class="keyword">val</span> iterator = edges.iterator()</div><div class="line">    <span class="keyword">val</span> sets = DisjointSet&lt;N&gt;()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: E? &#123;</div><div class="line">        <span class="keyword">if</span> (!iterator.hasNext())</div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span></div><div class="line"></div><div class="line">        <span class="keyword">val</span> edge = iterator.next()</div><div class="line">        <span class="keyword">if</span> (sets.test(edge.A, edge.B))</div><div class="line">            <span class="keyword">return</span> next()</div><div class="line"></div><div class="line">        sets.merge(edge.A, edge.B)</div><div class="line">        <span class="keyword">return</span> edge</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>One challenge, as mention before, is “cycle detection” which is handled by <a href="/2016/09/30/Curious-case-of-disjoint-set/">DisjointSet</a>. It also, to allow animation, returns only one edge at the time (see <code>next</code>). So what it does?</p>
<p>It takes a sequence of <code>edges</code> as input. They are assumed to be in right order, sorted by weight for <em>minimum spanning tree</em>, and randomized for <em>random spanning tree</em>. It creates empty <code>DisjointSet</code> to track cycles. On each step, it checks if there are still edges to test (<code>iterator.hasNext</code>). If so, it takes next edge and check if it would form a cycle (<code>sets.test</code>). If it would, it tries <code>next</code> edge, if it wouldn’t it adds this edge to solution (<code>sets.merge</code>) and returns it.</p>
<p>That’s kind of it. Rest is just presentation.</p>
<h2 id="Hex-tiles"><a href="#Hex-tiles" class="headerlink" title="Hex tiles"></a>Hex tiles</h2><p>All algorithms I was using so far were in square grid space, but they did not need to be. So for this one I decided to build a maze of hex tiles.</p>
<p><img src="/images/maze/maze-hex-5x5.png" alt="Hex tiles 5x5"></p>
<p>It added some complexity to coordinates and drawing. I won’t be getting into details as there is a lot of websites talking about hex tiles as they are foundation of many games. If you are interested just start <a href="http://www.redblobgames.com/grids/hexagons/" target="_blank" rel="external">here</a>.</p>
<p>The domain model is quite trivial:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Tile</span></span>(<span class="keyword">val</span> x: <span class="built_in">Int</span>, <span class="keyword">val</span> y: <span class="built_in">Int</span>)</div><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span></span>(<span class="keyword">override</span> <span class="keyword">val</span> A: Tile, <span class="keyword">override</span> <span class="keyword">val</span> B: Tile) : Edge&lt;Tile&gt;</div></pre></td></tr></table></figure>
<p>there are <em>tiles</em> and they are connected with <em>doors</em>. It is worth noting that <code>Door</code> implements <code>Edge&lt;N&gt;</code> interface.</p>
<p>Building the world in rectangular space wasn’t particularly tricky but required some pen and paper experiment to get connection right:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">buildWorld</span><span class="params">(width: <span class="type">Int</span>, height: <span class="type">Int</span>)</span></span>: Sequence&lt;Door&gt; &#123;</div><div class="line">    <span class="keyword">val</span> result = mutableListOf&lt;Door&gt;()</div><div class="line">    <span class="keyword">val</span> map = mutableMapOf&lt;<span class="built_in">Int</span>, Tile&gt;()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">encode</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span> = y * (width + <span class="number">1</span>) + x</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">tileAt</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span> = map.getOrPut(encode(x, y)) &#123; Tile(x, y) &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (y <span class="keyword">in</span> <span class="number">0.</span>.height) &#123;</div><div class="line">        <span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">0.</span>.width) &#123;</div><div class="line">            <span class="keyword">val</span> tile = tileAt(x, y)</div><div class="line">            <span class="keyword">if</span> (x &gt; <span class="number">0</span>) result.add(Door(tile, tileAt(x - <span class="number">1</span>, y)))</div><div class="line">            <span class="keyword">if</span> (y &gt; <span class="number">0</span>) result.add(Door(tile, tileAt(x, y - <span class="number">1</span>)))</div><div class="line">            <span class="keyword">if</span> (x &lt; width &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; x % <span class="number">2</span> == <span class="number">0</span>) result.add(Door(tile, tileAt(x + <span class="number">1</span>, y - <span class="number">1</span>)))</div><div class="line">            <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; x % <span class="number">2</span> == <span class="number">0</span>) result.add(Door(tile, tileAt(x - <span class="number">1</span>, y - <span class="number">1</span>)))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result.asSequence()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The method above returns a an ordered sequence of <em>doors</em> (we will need to shuffle them for the algorithm).  </p>
<p>Presentation layer is a little bit messy to be honest, but I just wanted to make it work. Using image below and some primary school maths</p>
<p><img src="/images/maze/hex-tiles.png" alt="Geometry"></p>
<p>we can calculate positions of <em>tiles</em> in pixels and needed size of <em>canvas</em>:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> TILE_COLOR = <span class="string">"#fff"</span></div><div class="line"><span class="keyword">val</span> DOOR_COLOR = <span class="string">"#eee"</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> TILE_R = <span class="number">8.0</span></div><div class="line"><span class="keyword">val</span> TILE_H = TILE_R * Math.sqrt(<span class="number">3.0</span>) / <span class="number">2</span></div><div class="line"><span class="keyword">val</span> TILE_MARGIN = (TILE_R - TILE_H) * <span class="number">2</span></div><div class="line"></div><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>(<span class="keyword">val</span> x: <span class="built_in">Double</span>, <span class="keyword">val</span> y: <span class="built_in">Double</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> Tile.<span class="title">center</span><span class="params">()</span></span>: Point &#123;</div><div class="line">    <span class="keyword">val</span> rx = x * TILE_H * <span class="number">2</span> + TILE_R</div><div class="line">    <span class="keyword">val</span> ry = y * TILE_R * <span class="number">2</span> + TILE_H + (x % <span class="number">2</span>) * TILE_R</div><div class="line">    <span class="keyword">return</span> Point(rx + TILE_MARGIN, ry + TILE_MARGIN)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">worldSize</span><span class="params">(width: <span class="type">Int</span>, height: <span class="type">Int</span>)</span></span>: Point &#123;</div><div class="line">    <span class="keyword">val</span> rx = width * TILE_H * <span class="number">2</span> + TILE_R * <span class="number">2</span></div><div class="line">    <span class="keyword">val</span> ry = height * TILE_R * <span class="number">2</span> + TILE_H * <span class="number">2</span> + TILE_R</div><div class="line">    <span class="keyword">return</span> Point(rx + TILE_MARGIN * <span class="number">2</span>, ry + TILE_MARGIN * <span class="number">2</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>On top of that we can draw <em>tiles</em> as well:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> Tile.<span class="title">paint</span><span class="params">(context: <span class="type">CanvasRenderingContext2D</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> (x, y) = center()</div><div class="line">    <span class="keyword">val</span> r = TILE_R</div><div class="line">    <span class="keyword">val</span> h = TILE_H</div><div class="line">    context.fillStyle = TILE_COLOR</div><div class="line">    context.beginPath()</div><div class="line">    context.moveTo(x + r, y)</div><div class="line">    context.lineTo(x + r / <span class="number">2</span>, y + h)</div><div class="line">    context.lineTo(x - r / <span class="number">2</span>, y + h)</div><div class="line">    context.lineTo(x - r, y)</div><div class="line">    context.lineTo(x - r / <span class="number">2</span>, y - h)</div><div class="line">    context.lineTo(x + r / <span class="number">2</span>, y - h)</div><div class="line">    context.closePath()</div><div class="line">    context.fill()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> Door.<span class="title">paint</span><span class="params">(context: <span class="type">CanvasRenderingContext2D</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> (sx, sy) = A.center()</div><div class="line">    <span class="keyword">val</span> (ex, ey) = B.center()</div><div class="line">    context.strokeStyle = DOOR_COLOR</div><div class="line">    context.lineWidth = TILE_R</div><div class="line">    context.beginPath()</div><div class="line">    context.moveTo(sx, sy)</div><div class="line">    context.lineTo(ex, ey)</div><div class="line">    context.closePath()</div><div class="line">    context.stroke()</div><div class="line">    A.paint(context)</div><div class="line">    B.paint(context)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Just note that these <code>paint</code> functions are extension methods for <code>Tile</code> and <code>Door</code> respectively.</p>
<h2 id="User-interface"><a href="#User-interface" class="headerlink" title="User interface"></a>User interface</h2><p>The only remaining thing is presentation and some user interaction. </p>
<p>We need to get references to some DOM elements:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> canvas = document.getElementById(<span class="string">"main"</span>) <span class="keyword">as</span> HTMLCanvasElement</div><div class="line"><span class="keyword">val</span> context = canvas.getContext(<span class="string">"2d"</span>) <span class="keyword">as</span> CanvasRenderingContext2D</div><div class="line"><span class="keyword">val</span> button = document.getElementById(<span class="string">"restart"</span>) <span class="keyword">as</span> HTMLButtonElement</div></pre></td></tr></table></figure>
<p>then configure canvas:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> size = worldSize(WORLD_WIDTH, WORLD_HEIGHT)</div><div class="line">canvas.width = size.x.toInt()</div><div class="line">canvas.height = size.y.toInt()</div></pre></td></tr></table></figure>
<p>and attach event listener to <em>Restart</em> button:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">button.onClick &#123;</div><div class="line">    cancel()</div><div class="line">    clear()</div><div class="line">    launch()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>which will potentially kill previous animation, clear the canvas and start new animation.<br>Let’s implement those. Clearing canvas is just about painting it black:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</div><div class="line">    context.fillStyle = <span class="string">"#000"</span></div><div class="line">    context.fillRect(<span class="number">0.0</span>, <span class="number">0.0</span>, size.x, size.y)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Starting animation is a little bit more complex:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handle: <span class="built_in">Int</span>? = <span class="literal">null</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">animate</span><span class="params">(algorithm: <span class="type">Kruskal</span>&lt;<span class="type">Tile</span>, Door&gt;)</span></span> &#123;</div><div class="line">    algorithm.next()?.apply &#123;</div><div class="line">        paint(context)</div><div class="line">        handle = window.setTimeout(&#123; animate(algorithm) &#125;, <span class="number">0</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">launch</span><span class="params">()</span></span> &#123;</div><div class="line">    animate(Kruskal(buildWorld(WORLD_WIDTH, WORLD_HEIGHT).shuffled()))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>It does have a <code>handle</code> (nullable int) to store timeout handler so we can cancel it if needed. We starting animation (<code>launch</code>) it generates all the edges (<code>buildWorld</code>) and shuffles them (<code>shuffled</code>). Then passes this sequence of edges to <code>animate</code> function which is handling one edge at the time using a timer (<code>window.setTimeout</code>). It takes next edge (<code>algorithm.next()</code>), paints it (<code>paint</code>) and schedules next step (<code>handle = window.setTimeout(...)</code>). It worth noting that when first <code>null</code> edge is returned the whole loop stops.</p>
<p>Finally, the <code>cancel</code> method:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">cancel</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> (handle != <span class="literal">null</span>) &#123;</div><div class="line">        window.clearTimeout(handle!!)</div><div class="line">        handle = <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>which just cancels potentially scheduled “next step”, therefore cancelling whole animation. </p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This is very subjective but Kotlin seems to me to be most polished from all languages I’ve tried. But they are all really good. Fable has a lot of community behind it, Scala.js is backed by… you know… Scala and Kotlin is done by JetBrains. There is elephant in the room as well, and it is called TypeScript. Maybe next time.</p>
<h2 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h2><p>You can find sources <a href="https://github.com/MiloszKrajewski/kotlinjs-hexagen" target="_blank" rel="external">here</a> or you can just use <a href="/kotlinjs-hexagen/index.html">online demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Quick-links&quot;&gt;&lt;a href=&quot;#Quick-links&quot; class=&quot;headerlink&quot; title=&quot;Quick links&quot;&gt;&lt;/a&gt;Quick links&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2016/09/14/Maze-ge
    
    </summary>
    
    
      <category term="maze" scheme="http://red-green-rewrite.github.io/tags/maze/"/>
    
      <category term="kotlin" scheme="http://red-green-rewrite.github.io/tags/kotlin/"/>
    
      <category term="kotlin.js" scheme="http://red-green-rewrite.github.io/tags/kotlin-js/"/>
    
      <category term="algorithm" scheme="http://red-green-rewrite.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Curious case of disjoint-set</title>
    <link href="http://red-green-rewrite.github.io/2016/09/30/Curious-case-of-disjoint-set/"/>
    <id>http://red-green-rewrite.github.io/2016/09/30/Curious-case-of-disjoint-set/</id>
    <published>2016-09-30T00:11:55.000Z</published>
    <updated>2016-10-05T07:38:51.899Z</updated>
    
    <content type="html"><![CDATA[<p>While implementing Kruskal’s algorithm to build <a href="/2016/09/14/Maze-generator-with-Fable/">mazes</a> (also known as random spanning trees) I encountered interesting problem. Randomized version of Kruskal’s algorithms is quite simple: take any <em>edge</em>, if it would form a <em>cycle</em> reject it (as it will not be a <em>tree</em> anymore) otherwise accept it. That’s it. It’s really simple, there is only one problem: how to detect cycles.</p>
<p>On this picture you can see two separate trees (a forest):</p>
<p><img src="/images/maze/kruskal-problem.png" alt="Forest"></p>
<p>It is quite clear that connecting 3 and 7 won’t form a cycle as vertex 7 has not been visited yet. The difference between edges 3-1 and 3-6 is not so obvious anymore. All of those vertices (nodes) are visited, but 3-1 will form a cycle, while 3-6 will not. </p>
<p>It would help if we knew which tree given node belongs to, as cycle is formed only when connecting two visited nodes from the same tree (3-1). When connecting visited nodes from different trees, we do not create a cycle, we just connect two trees forming new bigger tree (3-6).</p>
<p>Storing something like <code>TreeId</code> on each node and updating it when trees are merged would theoretically work but would be quite slow. Imagine that we just added single edge connecting two trees, let’s call them <em>A</em> and <em>B</em>. What we would need to do now is to update <em>all</em> nodes from smaller tree (let’s say it is B) and tell them “you are tree A now”. Now let’s assume both trees have 1000000 vertices… oops.</p>
<p>We need a better data structure to store such sets and, fortunately, there is one. It is called <em>disjoint-set</em> (also known as <em>union-find</em> or <em>merge-find set</em>) and it serves exactly that purpose.</p>
<h2 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works?"></a>How it works?</h2><p>Disjoint-set organizes items into trees where every item has a parent. Two items belong to the same set when they have same parent.<br>Let’s start with set of items where no merges has been done so every item is in its own separate set:</p>
<p><img src="/images/maze/disjoint-set-7x1.png" alt="Seven distinct sets"></p>
<h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><p>Merging two items into set is about assigning one as a parent of the other one:</p>
<p><img src="/images/maze/disjoint-set-1x3.png" alt="One set with 3 items"></p>
<p>Now, the root <strong>2</strong> identifies the whole set so the question “Which set item <strong>1</strong> belongs to?” is answered by “It belongs to set <strong>2</strong>“. You can also say: <strong>2</strong> is representative items for the whole set.</p>
<p>On the diagram below, we can see two sets: set <strong>2</strong> and set <strong>5</strong>. Items <strong>1</strong>, <strong>2</strong> and <strong>3</strong> belong to set <strong>2</strong>, while items <strong>4</strong>, <strong>5</strong>, <strong>6</strong>, <strong>7</strong> belong to set <strong>5</strong>. Which items becomes a root in merging process is irrelevant although we will try to limit the height of the tree to reduce potential number of hops.  </p>
<p><img src="/images/maze/disjoint-set-3+4.png" alt="Two sets, one with 3 the other with 4 items"></p>
<p>Merging sets works exactly as it was shown before but it will be clearer with the picture:</p>
<p><img src="/images/maze/disjoint-set-merge-3+7.png" alt="Merging sets"></p>
<p>We are trying to merge set containing item <strong>3</strong> with set containing item <strong>7</strong>. First we need to find roots of those items (<strong>2</strong> and <strong>5</strong> respectively) and then make one the parent of the other one. For algorithm correctness it can be either of those roots, but for performance reasons we choose the root of the higher one as new root. It helps keeping the tree relatively flat, as attaching tree of height 2 to the root of tree of height 3 does not change overall height. If both trees are of equal height we choose one arbitrarily and increase the height of resulting tree. That’s exactly what happened on the picture above, when two trees of height 1 (single item is height 0) formed new tree of height 2 after being merged.</p>
<p>With little though experiment, we can show that minimal tree of height 0 is a single item and minimal tree of height 1 is two items. As height increases only when merging trees of the same height tree of height 2 has to have at least 4 item. Merging two trees of height 2 creates tree of height 3 with at least 8 items. I guess, you can spot the pattern: there is minimum of 2^h items in the tree of height h, therefore finding a root has a <strong>pessimistic</strong> complexity of <em>O(logn)</em>. I emphasized the word pessimistic as usually it does much better.</p>
<h3 id="Find-with-path-compression"><a href="#Find-with-path-compression" class="headerlink" title="Find with path compression"></a>Find with path compression</h3><p>Finding a root of element can be used to compress the path at same time. As item’s potentially distant root is found, its parent can be updated to point directly to this root therefore compressing the path. </p>
<p>While merging <strong>3</strong> and <strong>8</strong> on the picture below:  </p>
<p><img src="/images/maze/disjoint-set-merge-3+8.png" alt="Merging sets with compression"></p>
<p>two things can be spotted:</p>
<ul>
<li>root of <strong>3</strong> has been found (<strong>5</strong>) and parent information has been updates so <strong>3</strong> points to <strong>5</strong> directly from now on</li>
<li><strong>8</strong> is a smaller tree than <strong>5</strong>, so <strong>5</strong> becomes a parent of <strong>8</strong></li>
</ul>
<p>Because of these two techniques <em>union by rank</em> and <em>path compression</em> amortized complexity is lower than <em>O(logn)</em>. <a href="https://en.wikipedia.org/wiki/Disjoint-set_data_structure" target="_blank" rel="external">Wikipedia</a> says:</p>
<blockquote>
<p>These two techniques complement each other; applied together, the amortized time per operation is only O(a(n)), where a(n) is the inverse of the function n = f(x) = A(x,x), and A is the extremely fast-growing Ackermann function. Since a(n) is the inverse of this function, a(n) is less than 5 for all remotely practical values of n. Thus, the amortized running time per operation is effectively a small constant.</p>
</blockquote>
<p>I actually love the <em>“is less than 5 for all remotely practical values of n”</em> part.</p>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>All items in set need two properties: <code>parent</code> and <code>rank</code> (or <code>height</code>). There are two possible approaches: objects in set would need to implement some specific interface (<code>T: IDisjointSetExtraInfo</code>) or we could maintain some internal dictionary <code>Dictionary&lt;T, ExtraInfo&gt;</code> and store required extra information this way. As usual there are pros and cons of both approaches. </p>
<p><img src="/images/maze/trade-offs-everywhere.jpg" alt="Trade-offs everywhere"></p>
<p>The approach with dictionary is more generic, so I’m going to use it, and allow any <code>T</code>, with no constraints (apart from <em>equality</em>).</p>
<p>I’ve originally needed an implementation in <a href="https://kotlinlang.org/" target="_blank" rel="external">Kotlin</a> but as solution is quite generic I’ve also added an implementation in <a href="http://fsharp.org/" target="_blank" rel="external">F#</a> to my ever growing library-of-data-structures-which-I-may-want-to-use-in-F#-on-day (TM).</p>
<h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h3><p>Let’s start with encapsulation of, mentioned before, “extra info”:  </p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Kotlin</span></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Tag</span></span>() &#123;</div><div class="line">    <span class="keyword">var</span> parent = <span class="keyword">this</span></div><div class="line">    <span class="keyword">var</span> height = <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// F#</span></div><div class="line"><span class="keyword">module</span> DisjointSet =</div><div class="line">    <span class="class"><span class="keyword">type</span> <span class="title">private</span> <span class="title">Tag</span></span>() <span class="keyword">as</span> this =</div><div class="line">        <span class="keyword">member</span> <span class="keyword">val</span> parent = this <span class="keyword">with</span> get, set</div><div class="line">        <span class="keyword">member</span> <span class="keyword">val</span> height = <span class="number">0</span> <span class="keyword">with</span> get, set</div></pre></td></tr></table></figure>
<p>(Completely off-topic: what F# compiler generates here is extremely puzzling, I understand it handles <code>parent = this</code> but it still puzzles me. Check it with <a href="http://ilspy.net/" target="_blank" rel="external">ILSpy</a> if you dare)</p>
<p>So, we have extra info class (called <code>Tag</code>), so far.</p>
<h3 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h3><p>We can implement <code>find</code> with path compression which is just following <code>parent</code> link on the way up and updating it on the way back:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Kotlin</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">find</span><span class="params">(tag: <span class="type">Tag</span>)</span></span>: Tag &#123;</div><div class="line">    <span class="keyword">if</span> (tag.parent != tag)</div><div class="line">        tag.parent = find(tag.parent)</div><div class="line">    <span class="keyword">return</span> tag.parent</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// F#</span></div><div class="line"><span class="keyword">let</span> <span class="keyword">rec</span> <span class="keyword">private</span> find (tag: Tag) = </div><div class="line">    <span class="keyword">if</span> tag.parent &lt;&gt; tag <span class="keyword">then</span> </div><div class="line">        tag.parent &lt;- find(tag.parent)</div><div class="line">    tag.parent</div></pre></td></tr></table></figure>
<h3 id="Merge-1"><a href="#Merge-1" class="headerlink" title="Merge"></a>Merge</h3><p>Implementing <code>merge</code> (or <code>union</code>) is a little bit complicated, but just a little. We need to <code>find</code> roots of both sets. If they are the same item, it means that objects are already in the same set therefore there is nothing to merge. If roots are different, they are in different sets, so we need to merge them by setting <code>parent</code> property of one root to the other one, potentially updating <code>height</code> (or <code>rank</code>):</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Kotlin  </span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">merge</span><span class="params">(x: <span class="type">Tag</span>, y: <span class="type">Tag</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> xroot = find(x)</div><div class="line">    <span class="keyword">val</span> yroot = find(y)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (xroot == yroot)</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (xroot.height &lt; yroot.height) &#123;</div><div class="line">        xroot.parent = yroot</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        yroot.parent = xroot</div><div class="line">        <span class="keyword">if</span> (xroot.height == yroot.height)</div><div class="line">            xroot.height++</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// F#</span></div><div class="line"><span class="keyword">let</span> <span class="keyword">private</span> merge tagA tagB =</div><div class="line">    <span class="keyword">match</span> find(tagA), find(tagB) <span class="keyword">with</span></div><div class="line">    | rootA, rootB <span class="keyword">when</span> rootA &lt;&gt; rootB -&gt; </div><div class="line">        <span class="keyword">match</span> rootA.height - rootB.height <span class="keyword">with</span></div><div class="line">        | balance <span class="keyword">when</span> balance &gt;= <span class="number">0</span> -&gt; </div><div class="line">            rootB.parent &lt;- rootA</div><div class="line">            <span class="keyword">if</span> balance = <span class="number">0</span> <span class="keyword">then</span> rootA.height &lt;- rootA.height + <span class="number">1</span></div><div class="line">        | _ -&gt; rootA.parent &lt;- rootB</div><div class="line">    | _ -&gt; ()</div></pre></td></tr></table></figure>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Now, we can implement the translation layer between <code>Tag</code> and <code>T</code>, most likely a class encapsulating a dictionary:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Kotlin</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisjointSet</span>&lt;<span class="type">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">val</span> map = mutableMapOf&lt;T, Tag&gt;()</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// F#</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">DisjointSet</span>&lt;'T when 'T : equality&gt;</span>() =</div><div class="line">    <span class="keyword">let</span> map = Dictionary&lt;<span class="symbol">'T</span>, Tag&gt;()</div><div class="line">    <span class="comment">//...</span></div></pre></td></tr></table></figure>
<h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><p>Find method, implemented before, makes sense only in a domain of <em>tags</em> which are not exposed outside this module/package. The value returned by <code>find</code> is also not really worth keeping as it may change all the time while sets are merged. What we want to expose though is the function which will test if two items are in the same set.</p>
<p>There are two possible optimizations here:</p>
<ul>
<li>We do not need to go though the process if both items (both <code>T</code>s) are the same item (<code>if (x == y) return true</code>)</li>
<li>if one of the items is not in dictionary at all, it means that it was not taking part in any merge operation yet, therefore it cannot be in the same set as the other one</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Kotlin</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(x: <span class="type">T</span>, y: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    <span class="keyword">val</span> xtag = map[x]</div><div class="line">    <span class="keyword">val</span> ytag = map[y]</div><div class="line">    <span class="keyword">return</span> xtag != <span class="literal">null</span> &amp;&amp; ytag != <span class="literal">null</span> &amp;&amp; find(xtag) == find(ytag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// F#</span></div><div class="line"><span class="keyword">let</span> get key = </div><div class="line">    <span class="keyword">let</span> result = ref Unchecked.defaultof&lt;Tag&gt;</div><div class="line">    <span class="keyword">match</span> map.TryGetValue(key, result) <span class="keyword">with</span> | <span class="keyword">false</span> -&gt; None | _ -&gt; Some result.Value</div><div class="line"></div><div class="line"><span class="keyword">member</span> x.Test(keyA: <span class="symbol">'T</span>, keyB: <span class="symbol">'T</span>) =</div><div class="line">    (keyA = keyB) || (</div><div class="line">        <span class="keyword">match</span> get keyA, get keyB <span class="keyword">with</span> </div><div class="line">        | Some tagA, Some tagB -&gt; find(tagA) = find(tagB)</div><div class="line">        | _ -&gt; <span class="keyword">false</span></div><div class="line">    )</div></pre></td></tr></table></figure>
<p>The <code>get</code> method in F# is a little wrapper for <code>TryGetValue</code>. It wraps quite ugly <code>Key -&gt; &#39;Value byref -&gt; bool</code> and converts it into much more functional <code>&#39;Key -&gt; &#39;Value option</code>.</p>
<h3 id="Merge-2"><a href="#Merge-2" class="headerlink" title="Merge"></a>Merge</h3><p>We had merge already implemented, all we need is handling the translation between <code>T</code> and <code>Tag</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Kotlin</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">merge</span><span class="params">(x: <span class="type">T</span>, y: <span class="type">T</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> xtag = map.getOrPut(x) &#123; Tag() &#125;</div><div class="line">    <span class="keyword">val</span> ytag = map.getOrPut(y) &#123; Tag() &#125;</div><div class="line">    merge(xtag, ytag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// F#</span></div><div class="line"><span class="keyword">let</span> set key tag = map.[key] &lt;- tag; tag</div><div class="line"><span class="keyword">let</span> getOrCreate key = <span class="keyword">match</span> get key <span class="keyword">with</span> | Some v -&gt; v | None -&gt; Tag() |&gt; set key </div><div class="line"></div><div class="line"><span class="keyword">member</span> x.Merge(keyA: <span class="symbol">'T</span>, keyB: <span class="symbol">'T</span>) =</div><div class="line">    merge (getOrCreate keyA) (getOrCreate keyB)</div></pre></td></tr></table></figure>
<p>And again, we needed a little wrapper functions in F#. Sometimes .NET disappoints me with quite minimalistic API. </p>
<p>Regardless of my complaints, that’s it. Please mention disjoint-set when talking to your friends, maybe when discussing Ackermann function or generating mazes using Kruskal’s algorithm.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;While implementing Kruskal’s algorithm to build &lt;a href=&quot;/2016/09/14/Maze-generator-with-Fable/&quot;&gt;mazes&lt;/a&gt; (also known as random spanning
    
    </summary>
    
    
      <category term="kotlin" scheme="http://red-green-rewrite.github.io/tags/kotlin/"/>
    
      <category term="algorithm" scheme="http://red-green-rewrite.github.io/tags/algorithm/"/>
    
      <category term="tree" scheme="http://red-green-rewrite.github.io/tags/tree/"/>
    
      <category term="fsharp" scheme="http://red-green-rewrite.github.io/tags/fsharp/"/>
    
  </entry>
  
  <entry>
    <title>Maze generator again this time with Scala.js</title>
    <link href="http://red-green-rewrite.github.io/2016/09/26/Maze-generator-again-but-this-time-with-Scala-js/"/>
    <id>http://red-green-rewrite.github.io/2016/09/26/Maze-generator-again-but-this-time-with-Scala-js/</id>
    <published>2016-09-26T18:44:57.000Z</published>
    <updated>2016-10-31T03:11:52.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-links"><a href="#Quick-links" class="headerlink" title="Quick links"></a>Quick links</h2><ul>
<li><a href="/2016/09/14/Maze-generator-with-Fable/">Randomized depth-first search</a></li>
<li><a href="/2016/09/15/Shaking-maze-generator/">Randomized depth-first search with stack shaking</a></li>
<li><a href="/2016/09/26/Maze-generator-again-but-this-time-with-Scala-js/">Random spanning tree with Prim’s algorithm</a></li>
<li><a href="/2016/10/06/Kruskal-Kotlin-and-Hex-Tiles/">Random spanning tree using Kruskal’s algorithm</a></li>
<li><a href="/2016/10/30/Kruskal-DFS-hybrid-with-reduced-branching-factor/">Hybrid of depth-first search and Kruskal’s algorithm</a></li>
<li><a href="https://github.com/MiloszKrajewski/scalajs-mazigeen" target="_blank" rel="external">Source code</a></li>
<li><a href="/scalajs-mazigeen/index.html">Online demo</a></li>
</ul>
<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>So last week I was doing <a href="/2016/09/14/Maze-generator-with-Fable/">maze generator using randomizes depth first search</a> with <a href="https://fable-compiler.github.io/" target="_blank" rel="external">Fable</a>. Then, to increase “branching factor” I’ve added <a href="/2016/09/15/Shaking-maze-generator/">stack shaking</a>. Today it’s time for slightly different approach.</p>
<p>As I said before this task was just kind of excuse technologies which I never used before. So far, I managed to scratch the surface of <a href="/2016/09/14/Maze-generator-with-Fable/">Fable</a>, <a href="https://webpack.github.io/" target="_blank" rel="external">Webpack</a> and <a href="https://github.com/Matt-Esch/virtual-dom" target="_blank" rel="external">VirtualDOM</a>. For performance reasons VirtualDOM got replaced by <a href="http://projects.calebevans.me/jcanvas/" target="_blank" rel="external">jCanvas</a>.</p>
<p>So, today’s new tech is <a href="https://www.scala-js.org/" target="_blank" rel="external">Scala.js</a>! Yay! I’m a big fan of <a href="http://www.scala-lang.org/" target="_blank" rel="external">Scala</a> although I did not have a chance to use it for anything bigger than HelloWorld so far. I’m not saying that this task is much bigger, but at least it does <em>something</em>. Anyway, <em>Scala.js</em>, here I come!</p>
<h2 id="Setting-environement-up"><a href="#Setting-environement-up" class="headerlink" title="Setting environement up"></a>Setting environement up</h2><p>It was not trivial to set up the environment. I actually struggled with the environment for couple of days before I managed to make it run. Making it work with <em>Webpack</em> was painful, especially because I’m not proficient in either of those. Apparently, <em>Scala.js</em> does <strong>not</strong> produce modular JavaScript and expects everything to be in <code>global</code>, so instead of:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jquery = <span class="built_in">require</span>(<span class="string">"jquery"</span>);</div><div class="line"><span class="keyword">var</span> scalajs = <span class="built_in">require</span>(<span class="string">"scalajs"</span>)(jquery);</div></pre></td></tr></table></figure>
<p>we need this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// not actual code!</span></div><div class="line"><span class="keyword">var</span> jquery = <span class="built_in">require</span>(<span class="string">"jquery"</span>);</div><div class="line">global.jQuery = jquery;</div><div class="line"><span class="built_in">require</span>(<span class="string">"scalajs"</span>);</div><div class="line"><span class="keyword">var</span> scalajs = global.scalajs;</div></pre></td></tr></table></figure>
<p>Quite nasty. Maybe there is easier way, but it wasn’t obvious. If you know how to do it better let me know, but if you have similar problem you can use my <a href="https://github.com/MiloszKrajewski/template-scalajs-sbt-webpack" target="_blank" rel="external">generic empty project</a>, but be aware - is highly opinionated.</p>
<p>Let’s do some coding now…</p>
<h2 id="The-algorithm"><a href="#The-algorithm" class="headerlink" title="The algorithm"></a>The algorithm</h2><p>Most of maze generation algorithms on <a href="https://en.wikipedia.org/wiki/Maze_generation_algorithm" target="_blank" rel="external">Wikipedia</a> are building spanning trees for graphs where vertices are representing <em>rooms</em> and edges are representing <em>doors</em>. </p>
<p>Last week’s approach was <a href="/2016/09/14/Maze-generator-with-Fable/">randomized depth first search</a> now it’s time for <a href="https://en.wikipedia.org/wiki/Prim%27s_algorithm" target="_blank" rel="external">Prim’s algorithm</a>.</p>
<p><em>Prim’s algorithm</em> is building <em>minimum</em> spanning tree. We don’t need minimum, we need <em>random</em> spanning tree (that’s what <em>randomized depth first search</em> was doing). To achieve that, we can assign random weights to <em>edges</em> so <em>minimum</em> spanning tree will actually become <em>random</em> spanning tree. I didn’t but it could be actually interesting to play with different random distributions.</p>
<p>Let’s start with modelling the <code>Node</code> (or <em>Vertex</em>) and <code>Edge</code>:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Node</span>[<span class="type">E</span>] </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edges</span></span>: <span class="type">Seq</span>[<span class="type">E</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Edge</span>[<span class="type">N</span>] </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">A</span></span>: <span class="type">N</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">B</span></span>: <span class="type">N</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">weight</span></span>: <span class="type">Double</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If you don’t know what <code>trait</code> is, you can think about this as <code>interface</code> from Java or C#. It is a little bit more complicated than that, but it is good enough aproximation, at least for this model. So, <code>Node</code> (<em>vertex</em>) has a sequence (list?) of <em>edges</em> going out, and <code>Edge</code> has two <em>nodes</em>, beginning and end, plus <em>weight</em>. That’s what <em>Prim’s algorithm</em> needs to work.</p>
<p>Actually, <code>Edge.weight</code> does not need to be modelled as <code>Double</code>. It could be declared as type parameter, let’s say <code>W</code>:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Edge</span>[<span class="type">N</span>, <span class="type">W</span>] </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">A</span></span>: <span class="type">N</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">B</span></span>: <span class="type">N</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">weight</span></span>: <span class="type">W</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In such case implementation of <em>Prim’s algorithm</em> would need a way to compare two <code>W</code>s (<code>Ordering[W]</code> or <code>IComparator&lt;W&gt;</code>) but, for simplicity, I’ve implemented it as <code>Double</code> so let’s leave it like this.</p>
<p>So, let’s start with Prim’s solver:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prim</span>[<span class="type">N</span> &lt;: <span class="type">Node</span>[<span class="type">E</span>], <span class="title">E</span> <span class="title">&lt;</span></span>: <span class="type">Edge</span>[<span class="type">N</span>]](<span class="keyword">val</span> node: <span class="type">N</span>) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>So, what we have is a generic class which take two types <code>N</code> and <code>E</code> where <em>N</em> is <em>Node of E</em> and <em>E</em> is <em>Edge of N</em>. We are just making sure types are consistent.</p>
<p>How Prim’s algorithm work? It starts with a <em>single node</em> and marks it as visisted. On every step it choses an <em>edge with minimum weight</em> which connects <em>visited node</em> to <em>not visited node</em>. </p>
<p>That’s kind of it and it can be derived from the name: <em>minimum spanning tree</em>. We know that every node needs to be in solution (the word: <em>spanning</em>), we don’t take edges with both ends already visited as we don’t want <em>cycles</em> (the word: <em>tree</em>), we don’t take edges with both ends not visited as it could create <em>disjoint graph</em> (the word <em>spanning</em> again, and <em>tree</em> but not <em>forest</em>). We also take lightests <em>edge</em> available as we need it to be <em>minimum</em>. Don’t quote this though, it is not formal proof of correctness :) </p>
<p>So this description suggests the solution needs: <em>set of visited nodes</em> and <em>ordered queue of edges</em>. </p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scala.collection.&#123;mutable =&gt; c&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prim</span>[<span class="type">N</span> &lt;: <span class="type">Node</span>[<span class="type">E</span>], <span class="title">E</span> <span class="title">&lt;</span></span>: <span class="type">Edge</span>[<span class="type">N</span>]](<span class="keyword">val</span> node: <span class="type">N</span>) &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">val</span> ordering: <span class="type">Ordering</span>[<span class="type">E</span>] = <span class="type">Ordering</span>.by(e =&gt; -e.weight)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">val</span> queue = c.<span class="type">PriorityQueue</span>.empty(ordering)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">val</span> visited = c.<span class="type">HashSet</span>.empty[<span class="type">N</span>]</div><div class="line"></div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Nothing fancy. We have <em>set of visited nodes</em> (<code>visited</code>), we have <em>ordered queue of  edges</em> (<code>queue</code>). To make it <em>ordered</em> we use <code>PriorityQueue</code> provide a way to compare <em>edges</em> (<code>ordering</code>) by comparing <em>weights</em>. As <code>PriorityQueue</code> puts heaviest first we need to reverse it. I used <code>-weight</code> but <code>Ordering</code> has actually a method <code>reverse</code> (I just found it out too late).</p>
<p>As I said last week I like one-liners to remove clutter from business code, so let’s define few for this task:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(node: <span class="type">N</span>) = visited.contains(node)</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">mark</span></span>(node: <span class="type">N</span>) = visited.add(node)</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span></span>(): <span class="type">Option</span>[<span class="type">E</span>] = <span class="keyword">if</span> (queue.isEmpty) <span class="type">None</span> <span class="keyword">else</span> <span class="type">Some</span>(queue.dequeue())</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">fanout</span></span>(node: <span class="type">N</span>) = queue.enqueue(node.edges: _*)</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">visit</span></span>(node: <span class="type">N</span>) = &#123; mark(node); fanout(node) &#125;</div></pre></td></tr></table></figure>
<p>We can <code>test</code> the <em>node</em> if it was <em>visited</em>, we can <code>mark</code> the <em>node</em> as such, we <code>dequeue</code> the edge from <em>queue of lightests edges</em>, and we can <code>fanout</code> from given <em>node</em> by adding all outgoing <em>edges</em> to the <em>queue of lightests edges</em>. As last one we have full definition what a <em>visit</em> means, it is <em>marking</em> and then <em>fanning out</em> (I use this word wrongly, don’t I?).</p>
<p>Two non-trivial things. My <em>reimplementation</em> of <code>deqeue</code> returns <code>Option[E]</code>. I actually still don’t belive that there is no <em>dequeue</em> returning <em>option</em> on <code>PriorirtyQueue</code>. I missed it, right? For those who don’t know what I’m whining about let me explain. In functional languages, and Scala claims to be one, exceptions are for trully exceptional situations like, “cosmic ray just hit the CPU”. The expected situations should be handled by type system, and <code>dequeue</code> is perfect example of it: queue can be empty and when you try to get something from it the result should be “nada, come back later”. And that’s exactly what <code>Option</code> type gives us.</p>
<p>The other thing (Am I digressing all the time?) is the <em>splat</em> operator (<code>:_*</code>) in <code>fanout</code>. I actually spent good 15 minutes looking for it as my google-foo failed me. Apparently, <code>enqueue</code> takes multiple arguments (<code>varargs</code> in Java or <code>params</code> in C#) but all I had was a sequence (one argument). C# deals with that implicitly but Scala requires this… thing. I’m actually not sure what it is, maybe something like static cast in F# (<code>:&gt;</code>) with wilcard (<code>_</code>) as a type? Anyway, it works as expected.</p>
<p>So we have mini language for domain of Prim’s algorithm. Let’s do the algorithm then. If it was about solving the problem I would use a <code>for</code> loop (<code>while</code>, <code>foreach</code> whatever). If it was a language with lazy generators or coroutines I would reuse the <code>for</code> loop with <code>yield</code>, but Scala does not have lazy generators. I guess “yet”, as every language is getting them (<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/yield" target="_blank" rel="external">JavaScript</a> and <a href="https://github.com/Kotlin/kotlin-coroutines" target="_blank" rel="external">Kotlin</a>). Anyway, that’s why we need to store the state (<code>visited</code> and <code>queue</code>) as class members and not inside a generator function.</p>
<p>Let’s go: </p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">next</span></span>(): <span class="type">Option</span>[<span class="type">E</span>] = &#123;</div><div class="line">    dequeue().flatMap &#123; edge =&gt;</div><div class="line">        (test(edge.<span class="type">A</span>), test(edge.<span class="type">B</span>)) <span class="keyword">match</span> &#123;</div><div class="line">            <span class="keyword">case</span> (<span class="literal">true</span>, <span class="literal">true</span>) =&gt; next()</div><div class="line">            <span class="keyword">case</span> (<span class="literal">false</span>, <span class="literal">true</span>) =&gt; visit(edge.<span class="type">A</span>); <span class="type">Some</span>(edge)</div><div class="line">            <span class="keyword">case</span> (<span class="literal">true</span>, <span class="literal">false</span>) =&gt; visit(edge.<span class="type">B</span>); <span class="type">Some</span>(edge)</div><div class="line">            <span class="keyword">case</span> _ =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalArgumentException</span>(<span class="string">"Not a valid graph"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>So this method potentially returns next edge. <em>Potentially</em> as we may run out of edges and that’s the stop condition for algorithm. So it takes next edge (<code>dequeue</code>) and if there are no more edges it just returns <code>None</code> and that’s it (<code>flatMap</code>). If there was an edge still available it tests both ends (<code>test(edge.X)</code>). If both are already visited (<code>true, true</code>) this edge is not good let’s take <code>next</code> one. If only one of them is visited (<code>true, false</code> and <code>false, true</code>) mark <code>visit</code> the <em>unvisited</em> one and return this edge (<code>Some(edge)</code>). If both of them seems to be not visited yet something went horribly wrong (cosmic ray?) and it’s time to panic (<code>throw</code>).</p>
<p> Nice.</p>
<h2 id="The-domain"><a href="#The-domain" class="headerlink" title="The domain"></a>The domain</h2><p>We have generic Prim’s algorithm implemented so far but we need to use to solve very specific problem. Building a maze. So let’s deal with the domain.</p>
<p>Let’s start with <code>Point</code> with geometric coordinates:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>)</span></div></pre></td></tr></table></figure>
<p>a <code>Room</code> which is a <code>Node</code> (has trait or implements interface) in a graph:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span>(<span class="params">val position: <span class="type">Point</span></span>) <span class="keyword">extends</span> <span class="title">Node</span>[<span class="type">Door</span>] </span>&#123;</div><div class="line">    <span class="keyword">val</span> edges = c.<span class="type">ArrayBuffer</span>.empty[<span class="type">Door</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(other: <span class="type">Room</span>, weight: <span class="type">Double</span>) = &#123;</div><div class="line">        <span class="keyword">val</span> door = <span class="keyword">new</span> <span class="type">Door</span>(<span class="keyword">this</span>, other, weight)</div><div class="line">        edges += door</div><div class="line">        other.edges += door</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>It additionally, defines <code>add</code> method (I should have named it <code>connect</code> I guess) which creates <em>door</em> connecting two <em>rooms</em>.  I’m actually quite impressed how flexible scala is in this respect. <code>Node</code> trait defines <code>edges</code> as <code>def edges: Seq[E]</code> (a method returning sequence) but <code>Room</code> class implements it as <code>val edges: ArrayBuffer[Door]</code> (a field holding mutable collection of <code>Door</code>). No implicit interface implementation or shadowing was needed, it just worked.</p>
<p>The last one is <code>Door</code> (or <em>edge</em>):</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Door</span>(<span class="params">val <span class="type">A</span>: <span class="type">Room</span>, val <span class="type">B</span>: <span class="type">Room</span>, val weight: <span class="type">Double</span></span>) <span class="keyword">extends</span> <span class="title">Edge</span>[<span class="type">Room</span>]</span></div></pre></td></tr></table></figure>
<p>The last thing we need for domain is the way to create the graph:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span>(<span class="params">size: <span class="type">Point</span>, random: (</span>) <span class="title">=&gt;</span> <span class="title">Double</span>) </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">val</span> rooms = <span class="type">Array</span>.tabulate(size.x, size.y) &#123; (x, y) =&gt; <span class="keyword">new</span> <span class="type">Room</span>(<span class="type">Point</span>(x, y)) &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">at</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>): <span class="type">Room</span> = rooms(x)(y)</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">connect</span></span>(room: <span class="type">Room</span>, other: <span class="type">Room</span>, weight: <span class="type">Double</span>) = room.add(other, weight)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (x &lt;- <span class="number">0</span> until size.x; y &lt;- <span class="number">0</span> until size.y) &#123;</div><div class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span>) connect(at(x, y), at(x - <span class="number">1</span>, y), random())</div><div class="line">        <span class="keyword">if</span> (y &gt; <span class="number">0</span>) connect(at(x, y), at(x, y - <span class="number">1</span>), random())</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">room00</span> </span>= rooms(<span class="number">0</span>)(<span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Model</code> object takes a size of the <em>world</em> and <em>random number generator</em> (so we can use any generator we want). It creates two dimensional array of <em>rooms</em> (<code>Array.tabulate</code>) initializes it (<code>new Room(x, y)</code>). If provides a function get <em>room</em> object at given location (<code>at(...): Room</code>) and <code>connect</code> two rooms. Both methods are kind of overkill but make the business logic (the <code>for</code> loop) clutter-free. We also export starting room (<code>room00</code>). If you really wanted to you could implement this <code>Model</code> class as a single function: <code>createModel: (Point, () =&gt; Double) =&gt; Room</code>, but old habits die hard.</p>
<p>So, once again, the domain is implemented. All what is left is the UI or presentation layer.</p>
<h2 id="The-presentation-layer"><a href="#The-presentation-layer" class="headerlink" title="The presentation layer"></a>The presentation layer</h2><p>I won’t be describing UI in details, so please refer to <a href="https://github.com/MiloszKrajewski/scalajs-mazigeen" target="_blank" rel="external">Github</a> for actual sources. In general it goes like this…</p>
<p>We have some constants:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> <span class="type">WORLD_SIZE</span> = <span class="type">Point</span>(<span class="number">100</span>, <span class="number">100</span>)</div><div class="line"></div><div class="line"><span class="keyword">val</span> <span class="type">ROOM_COLOR</span> = <span class="string">"#fff"</span></div><div class="line"><span class="keyword">val</span> <span class="type">DOOR_COLOR</span> = <span class="string">"#eee"</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> <span class="type">ROOM_SIZE</span> = <span class="number">6</span></div><div class="line"><span class="keyword">val</span> <span class="type">DOOR_SIZE</span> = <span class="number">1</span></div></pre></td></tr></table></figure>
<p>defining size of the <em>universe</em> (<code>WORLD_SIZE</code>), some colors, dimensions in pixels (<code>DOOR_SIZE</code> and <code>ROOM_SIZE</code>), and helper functions: </p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">toPixel</span></span>(v: <span class="type">Int</span>): <span class="type">Int</span> = v * <span class="type">ROOM_SIZE</span> + (v + <span class="number">1</span>) * <span class="type">DOOR_SIZE</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">toPixel</span></span>(p: <span class="type">Point</span>): <span class="type">Point</span> = <span class="type">Point</span>(toPixel(p.x), toPixel(p.y))</div></pre></td></tr></table></figure>
<p>to translate between <em>room</em> location to pixel position (<code>toPixel</code>).  </p>
<p>We need to intialize canvas:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span>() = &#123;</div><div class="line">    <span class="keyword">val</span> size = toPixel(<span class="type">WORLD_SIZE</span>)</div><div class="line">    <span class="keyword">val</span> (width, height) = (size.x, size.y)</div><div class="line">    <span class="keyword">val</span> view = <span class="string">s"0 0 <span class="subst">$width</span> <span class="subst">$height</span>"</span></div><div class="line"></div><div class="line">    jQuery(<span class="string">"#canvas"</span>)</div><div class="line">            .attr(<span class="string">"width"</span>, width).attr(<span class="string">"height"</span>, height)</div><div class="line">            .attr(<span class="string">"viewbox"</span>, view).attr(<span class="string">"viewport"</span>, view)</div><div class="line"></div><div class="line">    <span class="keyword">val</span> context =</div><div class="line">        document.getElementById(<span class="string">"canvas"</span>).asInstanceOf[<span class="type">Canvas</span>]</div><div class="line">                .getContext(<span class="string">"2d"</span>).asInstanceOf[<span class="type">CanvasRenderingContext2D</span>]</div><div class="line"></div><div class="line">    jQuery(<span class="string">"#restart"</span>).click((e: <span class="type">Any</span>) =&gt; restart(context, width, height))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>by setting <code>width</code>, <code>height</code> and <code>viewbox</code>, and attach <code>restart</code> method as a handler for <code>click</code> event on <em>Restart</em> button. </p>
<p>Restart shuts down previous animation (<code>shutdown</code>), sets up the drawing context of the canvas (<code>context</code>), initializes the <code>model</code> and <code>algorithm</code> and starts animation on interval (<code>window.setInterval</code>). </p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handle: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">None</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">restart</span></span>(context: <span class="type">CanvasRenderingContext2D</span>, width: <span class="type">Int</span>, height: <span class="type">Int</span>) = &#123;</div><div class="line">    shutdown()</div><div class="line"></div><div class="line">    context.clearRect(<span class="number">0</span>, <span class="number">0</span>, width, height)</div><div class="line"></div><div class="line">    <span class="keyword">val</span> model = <span class="keyword">new</span> <span class="type">Model</span>(<span class="type">WORLD_SIZE</span>, <span class="type">Random</span>.nextDouble)</div><div class="line">    <span class="keyword">val</span> algorithm = <span class="keyword">new</span> <span class="type">Prim</span>[<span class="type">Room</span>, <span class="type">Door</span>](model.room00)</div><div class="line"></div><div class="line">    handle = <span class="type">Some</span>(window.setInterval(() =&gt; step(algorithm, context), <span class="number">0</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shutdown</span></span>() = &#123;</div><div class="line">    handle.foreach(window.clearInterval)</div><div class="line">    handle = <span class="type">None</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>We will also need to actually draw <em>rooms</em> and <em>doors</em>:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawRoom</span></span>(context: <span class="type">CanvasRenderingContext2D</span>, room: <span class="type">Room</span>) = &#123;</div><div class="line">    <span class="keyword">val</span> p = toPixel(room.position)</div><div class="line">    context.fillStyle = <span class="type">ROOM_COLOR</span></div><div class="line">    context.fillRect(p.x, p.y, <span class="type">ROOM_SIZE</span>, <span class="type">ROOM_SIZE</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawDoor</span></span>(context: <span class="type">CanvasRenderingContext2D</span>, door: <span class="type">Door</span>) = &#123;</div><div class="line">    <span class="keyword">val</span> a = toPixel(door.<span class="type">A</span>.position)</div><div class="line">    <span class="keyword">val</span> b = toPixel(door.<span class="type">B</span>.position)</div><div class="line">    <span class="keyword">val</span> o = <span class="type">ROOM_SIZE</span> / <span class="number">2</span></div><div class="line">    context.strokeStyle = <span class="type">DOOR_COLOR</span></div><div class="line">    context.lineWidth = <span class="type">ROOM_SIZE</span></div><div class="line">    context.beginPath()</div><div class="line">    context.moveTo(a.x + o, a.y + o)</div><div class="line">    context.lineTo(b.x + o, b.y + o)</div><div class="line">    context.closePath()</div><div class="line">    context.stroke()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The last part is the single step of animation, which takes <code>algorithm</code> and drawing <code>context</code>:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">step</span></span>(algorithm: <span class="type">Prim</span>[<span class="type">Room</span>, <span class="type">Door</span>], context: <span class="type">CanvasRenderingContext2D</span>) = &#123;</div><div class="line">    algorithm.next() <span class="keyword">match</span> &#123;</div><div class="line">        <span class="keyword">case</span> <span class="type">None</span> =&gt; shutdown()</div><div class="line">        <span class="keyword">case</span> <span class="type">Some</span>(door) =&gt; </div><div class="line">            drawDoor(context, door)</div><div class="line">            drawRoom(context, door.<span class="type">A</span>)</div><div class="line">            drawRoom(context, door.<span class="type">B</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If next <em>edge</em>/<em>door</em> (<code>algorithm.next()</code>) cannot be found (<code>case None</code>) then animation is stopped (<code>shutdown()</code>) otherwise it just draws <em>door</em> and two <em>rooms</em>. </p>
<p>And yet again: that’s it.</p>
<h2 id="Online-demo"><a href="#Online-demo" class="headerlink" title="Online demo"></a>Online demo</h2><p>You can get your own copy from <a href="https://github.com/MiloszKrajewski/scalajs-mazigeen" target="_blank" rel="external">Github</a> or you can just watch it working <a href="http://red-green-rewrite.github.io/scalajs-mazigeen/index.html">here</a></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I really loved the fact that I had access to Scala collections and they worked as expected. It gives you this warm feeling when you can just use <code>PriorirtyQueue</code> of the shelf. The code Scala.js produces is not nearly as readable as Fable gives us. Is actually pretty awful with horribly mangled names. That’s why I was struggling to understand why it does not see jQuery and how to make it work with Webpack. I do now, but it took me a while.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Quick-links&quot;&gt;&lt;a href=&quot;#Quick-links&quot; class=&quot;headerlink&quot; title=&quot;Quick links&quot;&gt;&lt;/a&gt;Quick links&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2016/09/14/Maze-ge
    
    </summary>
    
    
      <category term="maze" scheme="http://red-green-rewrite.github.io/tags/maze/"/>
    
      <category term="algorithm" scheme="http://red-green-rewrite.github.io/tags/algorithm/"/>
    
      <category term="scala" scheme="http://red-green-rewrite.github.io/tags/scala/"/>
    
      <category term="scala.js" scheme="http://red-green-rewrite.github.io/tags/scala-js/"/>
    
  </entry>
  
  <entry>
    <title>Shaking maze generator</title>
    <link href="http://red-green-rewrite.github.io/2016/09/15/Shaking-maze-generator/"/>
    <id>http://red-green-rewrite.github.io/2016/09/15/Shaking-maze-generator/</id>
    <published>2016-09-15T14:19:49.000Z</published>
    <updated>2016-10-31T03:11:52.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-links"><a href="#Quick-links" class="headerlink" title="Quick links"></a>Quick links</h2><ul>
<li><a href="/2016/09/14/Maze-generator-with-Fable/">Randomized depth-first search</a></li>
<li><a href="/2016/09/15/Shaking-maze-generator/">Randomized depth-first search with stack shaking</a></li>
<li><a href="/2016/09/26/Maze-generator-again-but-this-time-with-Scala-js/">Random spanning tree with Prim’s algorithm</a></li>
<li><a href="/2016/10/06/Kruskal-Kotlin-and-Hex-Tiles/">Random spanning tree using Kruskal’s algorithm</a></li>
<li><a href="/2016/10/30/Kruskal-DFS-hybrid-with-reduced-branching-factor/">Hybrid of depth-first search and Kruskal’s algorithm</a></li>
<li><a href="https://github.com/MiloszKrajewski/fable-daedalus" target="_blank" rel="external">Source code</a></li>
<li><a href="/fable-daedalus/index.html">Online demo</a></li>
</ul>
<h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>This blogpost requires familiarity with <a href="/2016/09/14/Maze-generator-with-Fable/">previous one</a>.</p>
<h2 id="Low-branching-factor"><a href="#Low-branching-factor" class="headerlink" title="Low branching factor"></a>Low branching factor</h2><p>One of the disadvantages of using DFS to build mazes is “low branching factor”. The problem is that it actually runs for long time before hitting dead-end and having to backtrack, so it creates very long corridors with no room to “make the wrong turn” for potential maze explorer.<br>Let’s deal with it.</p>
<h2 id="The-algorithm"><a href="#The-algorithm" class="headerlink" title="The algorithm"></a>The algorithm</h2><p>Originally I used recursive version, but to avoid stack overflow, actual demo was done non-recursive version of DFS. </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> stackless mark test fanout node = seq &#123;</div><div class="line">    <span class="keyword">let</span> <span class="keyword">mutable</span> stack = [[node]]</div><div class="line">    <span class="keyword">while</span> stack.Length &gt; <span class="number">0</span> <span class="keyword">do</span></div><div class="line">        <span class="keyword">let</span> head, stack' = </div><div class="line">            <span class="keyword">match</span> stack <span class="keyword">with</span></div><div class="line">            | [] -&gt; None, [] </div><div class="line">            | [] :: rest -&gt; None, rest</div><div class="line">            | (head :: tail) :: rest -&gt;</div><div class="line">                <span class="keyword">if</span> test head <span class="keyword">then</span> None, tail :: rest</div><div class="line">                <span class="keyword">else</span> head |&gt; apply mark |&gt; Some, (head |&gt; fanout |&gt; List.ofSeq) :: tail :: rest</div><div class="line">        <span class="keyword">match</span> head <span class="keyword">with</span> | Some n -&gt; <span class="keyword">yield</span> n | _ -&gt; ()</div><div class="line">        stack &lt;- stack'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This version will be modified to allow “shaking the stack”. I’ll introduce one argument (<code>shake</code>) and use <code>shake stack</code> instead of just <code>stack</code> in match statement.</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> stackless mark test fanout shake node = seq &#123; <span class="comment">// &lt;-- here</span></div><div class="line">    <span class="keyword">let</span> <span class="keyword">mutable</span> stack = [[node]]</div><div class="line">    <span class="keyword">while</span> stack.Length &gt; <span class="number">0</span> <span class="keyword">do</span></div><div class="line">        <span class="keyword">let</span> head, stack' = </div><div class="line">            <span class="keyword">match</span> shake stack <span class="keyword">with</span> <span class="comment">// &lt;-- and here</span></div><div class="line">            | [] -&gt; None, [] </div><div class="line">            | [] :: rest -&gt; None, rest</div><div class="line">            | (head :: tail) :: rest -&gt;</div><div class="line">                <span class="keyword">if</span> test head <span class="keyword">then</span> None, tail :: rest</div><div class="line">                <span class="keyword">else</span> head |&gt; apply mark |&gt; Some, (head |&gt; fanout |&gt; List.ofSeq) :: tail :: rest</div><div class="line">        <span class="keyword">match</span> head <span class="keyword">with</span> | Some n -&gt; <span class="keyword">yield</span> n | _ -&gt; ()</div><div class="line">        stack &lt;- stack'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>That’s absolutely it in “The algorithm” layer.</p>
<h2 id="The-glue"><a href="#The-glue" class="headerlink" title="The glue"></a>The glue</h2><p>There was a “glue” layer adapting “The algorithm” to “The domain” and it just stopped working as we added new argument to the function. Don’t worry, though, it just a simple fix. </p>
<p>Previously it was calling <code>traverse</code> (or <code>stackless</code> depending which approach you used ‘elegant’ or ‘safe’) now it should call <code>stackless</code> (as <code>traverse</code> does not support shaking) with this extra argument. So the old code: </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">InitAt (<span class="number">0</span>, <span class="number">0</span>) </div><div class="line">|&gt; DFS.stackless (targetOf &gt;&gt; mark) (targetOf &gt;&gt; test) (targetOf &gt;&gt; fanout &gt;&gt; Array.shuffle)</div></pre></td></tr></table></figure>
<p>should be changed to:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">InitAt (<span class="number">0</span>, <span class="number">0</span>) </div><div class="line">|&gt; DFS.stackless (targetOf &gt;&gt; mark) (targetOf &gt;&gt; test) (targetOf &gt;&gt; fanout &gt;&gt; Array.shuffle) id</div></pre></td></tr></table></figure>
<p>and the code will compile again and work exactly as it was working before (you may remember that <code>id</code> function does absolutely nothing). Why we did that then?</p>
<p>Because now, on every single step we have an ability to modify the backtracking stack. </p>
<p>I’ll suggest something like:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> shake stack = </div><div class="line">    <span class="keyword">if</span> Random.random () &gt; <span class="number">0.01</span> <span class="keyword">then</span> stack</div><div class="line">    <span class="keyword">else</span> stack |&gt; Array.ofList |&gt; apply Array.shuffleInPlace |&gt; Array.toList</div></pre></td></tr></table></figure>
<p>Which in 99% of cases returns <code>stack</code> unmodified but from time to time shuffles it completely. Of course, it would be nice to use it now (<code>id</code> gets replaced by <code>shake</code>):</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">InitAt (<span class="number">0</span>, <span class="number">0</span>) </div><div class="line">|&gt; DFS.stackless (targetOf &gt;&gt; mark) (targetOf &gt;&gt; test) (targetOf &gt;&gt; fanout &gt;&gt; Array.shuffle) shake</div></pre></td></tr></table></figure>
<p>Please note, that from algorithm complexity point of view this is not good approach, as complexity just jumped from <strong>O(N)</strong> to <strong>O(N^2)</strong> (it’s a little but more complicated than that), but definitely it gives <a href="/fable-daedalus/index.html">better results</a>, as it tries to branch earlier.</p>
<p><img src="/images/maze/maze-2x100x100.png" alt="Pushing forward on the left, branching early on the right"></p>
<p>The bottom line is that I did not really modify the algorithm (<em>DFS</em>) I just injected some extra behavior into it, but it is totally externally controlled (kind of definition of “injected”, right?). Functional composition rlz.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Quick-links&quot;&gt;&lt;a href=&quot;#Quick-links&quot; class=&quot;headerlink&quot; title=&quot;Quick links&quot;&gt;&lt;/a&gt;Quick links&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2016/09/14/Maze-ge
    
    </summary>
    
    
      <category term="maze" scheme="http://red-green-rewrite.github.io/tags/maze/"/>
    
      <category term="algorithm" scheme="http://red-green-rewrite.github.io/tags/algorithm/"/>
    
      <category term="fsharp" scheme="http://red-green-rewrite.github.io/tags/fsharp/"/>
    
      <category term="fable" scheme="http://red-green-rewrite.github.io/tags/fable/"/>
    
  </entry>
  
  <entry>
    <title>Maze generator with Fable</title>
    <link href="http://red-green-rewrite.github.io/2016/09/14/Maze-generator-with-Fable/"/>
    <id>http://red-green-rewrite.github.io/2016/09/14/Maze-generator-with-Fable/</id>
    <published>2016-09-14T19:53:39.000Z</published>
    <updated>2016-10-31T03:11:52.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-links"><a href="#Quick-links" class="headerlink" title="Quick links"></a>Quick links</h2><ul>
<li><a href="/2016/09/14/Maze-generator-with-Fable/">Randomized depth-first search</a></li>
<li><a href="/2016/09/15/Shaking-maze-generator/">Randomized depth-first search with stack shaking</a></li>
<li><a href="/2016/09/26/Maze-generator-again-but-this-time-with-Scala-js/">Random spanning tree with Prim’s algorithm</a></li>
<li><a href="/2016/10/06/Kruskal-Kotlin-and-Hex-Tiles/">Random spanning tree using Kruskal’s algorithm</a></li>
<li><a href="/2016/10/30/Kruskal-DFS-hybrid-with-reduced-branching-factor/">Hybrid of depth-first search and Kruskal’s algorithm</a></li>
<li><a href="https://github.com/MiloszKrajewski/fable-daedalus" target="_blank" rel="external">Source code</a></li>
<li><a href="/fable-daedalus/index.html">Online demo</a></li>
</ul>
<h2 id="Redgate’s-first-ever-coding-challenge"><a href="#Redgate’s-first-ever-coding-challenge" class="headerlink" title="Redgate’s first ever coding challenge"></a>Redgate’s first ever coding challenge</h2><p>For quite some time I was looking for an excuse to use <a href="https://fable-compiler.github.io/" target="_blank" rel="external">Fable</a>. Fable is <a href="http://fsharp.org/" target="_blank" rel="external">F#</a> to JavaScript compiler. I generally shy away from JavaScript, as I am biased towards backend but as a big fan of F# I wanted to play a little with Fable (and <a href="https://www.scala-js.org/" target="_blank" rel="external">Scala.js</a> actually). On top of that, I wanted to try some other technologies I’ve never used before: <a href="https://github.com/Matt-Esch/virtual-dom" target="_blank" rel="external">VirtualDom</a> (maybe <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a>), <a href="https://webpack.github.io/" target="_blank" rel="external">Webpack</a>, <a href="http://www.pixijs.com/" target="_blank" rel="external">Pixi.js</a>. All I needed was an excuse…</p>
<p>I’ve found <a href="http://www.red-gate.com/our-company/entrypage/coding-challenge" target="_blank" rel="external">Redgate’s first ever coding challenge</a> on LinkedIn and I decided to do it with Fable in the browser. The challenge is about writing an application to generate mazes (thus the Daedalus reference). I wasn’t going to apply as my solution is probably the most trivial one using “randomized DFS”, so there is nothing to show off, but, I wanted to use those tools.</p>
<p><em>EDIT</em>: eventually, it did apply</p>
<p><img src="/images/maze/maze-100x100.png" alt="100x100">    </p>
<p>Initially solution was building SVG with VirtualDOM. It was very neat as Fable/VirtualDOM uses <a href="http://elm-lang.org/" target="_blank" rel="external">Elm</a> architecture (check Fable <a href="https://fable-compiler.github.io/samples/virtualdom/index.html" target="_blank" rel="external">samples page</a>). It was fast enough to solve the problem but unfortunatelly, for bigger mazes (&gt;50x50), not fast enough for live animation. Changing multiple <code>&lt;rect&gt;</code> to one long multipart <code>&lt;path&gt;</code> made it a little bit faster (~20%) but it still wasn’t good enough and it was definitely slowing down further it went.</p>
<p>The final version is not as ambitious, uses <a href="https://jquery.com/" target="_blank" rel="external">jQuery</a> and <a href="http://projects.calebevans.me/jcanvas/" target="_blank" rel="external">jCanvas</a>. Presentation layer is very old school, but it works and is very fast (relatively speaking, of course). Note, I could deal with the <code>&lt;canvas&gt;</code> without any supporting libraries, but one of my goals was to investigate and evaluate integration with native JavaScript libraries as, in my opinion, integration is one of the most important aspects of any X-to-JavaScript transpiler.     </p>
<h2 id="“You’re-very-clever-young-man-very-clever-”-said-the-old-lady-“But-it’s-functions-all-the-way-down-”"><a href="#“You’re-very-clever-young-man-very-clever-”-said-the-old-lady-“But-it’s-functions-all-the-way-down-”" class="headerlink" title="“You’re very clever, young man, very clever,” said the old lady. “But it’s functions all the way down!”"></a>“You’re very clever, young man, very clever,” said the old lady. “But it’s functions all the way down!”</h2><p><a href="https://vimeo.com/113588389" target="_blank" rel="external">Scott Wlaschin</a> says “No abstraction is too small”. I agree, I’m a big fan of “extracting abstraction” and I’m so glad F# supports and encourages local one-liners. I believe problems should be decomposed into small managable chunks first and then composed back into solution. Things should be named appropriately as well. Let me use example given by <a href="https://vimeo.com/97329157" target="_blank" rel="external">Kevlin Henney</a> (it’s actually Dan North’s example but I have no link): </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (portfolioIdsByTraderId.get(trader.getId()).containsKey(portfolio.getId())) &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Even if we understand every single word in this statement, it is still unclear what purpose it serves. It is not abstract enough, it contains too much of “implementation”. Maybe we should consider this as an alternative:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (trader.canView(portfolio)) &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Yup, that’s much better.</p>
<p>For every solution, at some point there will be a need for some “ugly implementation details”. It is just nicer when you can push it far away from business logic so it does not get in a way when you try to reason about what this code “actually does”.</p>
<p>In this article I will use a some one-liners. They might seem like overkill for this task but this is primarily fun project and using them is fun!</p>
<h2 id="The-algorithm"><a href="#The-algorithm" class="headerlink" title="The algorithm"></a>The algorithm</h2><p>There are few algorithms listed on <a href="https://en.wikipedia.org/wiki/Maze_generation_algorithm" target="_blank" rel="external">Wikipedia</a> and randomized depth-first search is probably the simplest one. </p>
<p>It has two disadvantages:</p>
<ul>
<li>solution has a low branching factor and contain many long corridors (please note, that this issue was addressed in <a href="/2016/09/15/Shaking-maze-generator/">following blogpost</a>)</li>
<li>solution does not contain cycles - This problem applies to most of solutions from Wikipedia. It seems that “maze generation problem” is perceived as “random spanning tree”. Cycles can be seen as shortcuts, therefore making it easier to solve for potential maze explorer, but also they open the door to “be lost forever”, making it infinitely harder. Trade-offs, trade-off, trade-offs.    </li>
</ul>
<p>I’m going to decompose the solution into smaller pieces instead of using single monolithic function. </p>
<blockquote>
<p>A physicist and a mathematician setting in a faculty lounge. Suddenly, the coffee machine catches on fire. The physicist grabs a bucket and leaps towards the sink, fills the bucket with water and puts out the fire. The second day, the same two sit in the same lounge. Again, the coffee machine catches on fire. This time, the mathematician stands up, gets a bucket, hands the bucket to the physicist, thus reducing the problem to a previously solved one. </p>
</blockquote>
<p>Let’s start with generic depth-first search then:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> DFS =</div><div class="line">    <span class="comment">// ('T -&gt; unit) -&gt; ('T -&gt; bool) -&gt; ('T -&gt; 'T seq) -&gt; 'T -&gt; 'T seq</span></div><div class="line">    <span class="keyword">let</span> <span class="keyword">rec</span> traverse mark test fanout node =  </div><div class="line">        seq &#123;</div><div class="line">            <span class="keyword">match</span> node |&gt; test <span class="keyword">with</span></div><div class="line">            | <span class="keyword">false</span> -&gt; </div><div class="line">                <span class="keyword">yield</span> node |&gt; apply mark</div><div class="line">                <span class="keyword">yield!</span> node |&gt; fanout |&gt; Seq.collect (traverse mark test fanout)</div><div class="line">            | _ -&gt; ()  </div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>where <code>mark: &#39;T -&gt; unit</code> is the function which will take a node and mark it as visited, <code>test: &#39;T -&gt; bool</code> will test is node has been visisted already, <code>fanout: &#39;T -&gt; &#39;T seq</code> will take a node and return a sequence of connected nodes (neighbours?) and finally <code>node: &#39;T</code> is just a starting point.</p>
<p>The algorithm goes like this:</p>
<ul>
<li>if node has not been visited yet (<code>node |&gt; test</code>) mark it as visisted (<code>apply mark</code>) and return it (<code>yield</code>). </li>
<li>for every connected node (<code>node |&gt; fanout</code>), rinse and repeat (<code>Seq.collect traverse mark test fanout</code>)</li>
</ul>
<p>If you don’t know what <code>apply</code> does I would recommend my <a href="/2016/09/14/Use-apply-and-carry-on/">other post</a>.</p>
<p>Done. We can go home… OK, I’m just joking.</p>
<p><em>NOTE</em>: This solution is vulnerable to stack overflow as it goes deeper and deeper with every visited node. The <a href="https://github.com/MiloszKrajewski/fable-daedalus" target="_blank" rel="external">actual solution</a> uses different implementation of DFS which is using <code>while</code> loop and lists to simulate call stack (I called it <code>stackless</code> which is a little self contradicting, isn’t it?). Idea is absolutely the same though, but code is less elegant.</p>
<h2 id="The-domain"><a href="#The-domain" class="headerlink" title="The domain"></a>The domain</h2><p>So, we have an algorithms. Now we need domain model.</p>
<p>Initially, the domain of this problem consisted of the <code>World</code>, which is a collection of <code>Rooms</code> which in turn have their <code>Location</code> and are connected (or not) through <code>Exits</code>. Not all of those concepts are needed for the algorithm. They may or may not be needed by presentation layer but we probably shouldn’t jump ahead, I guess.  </p>
<p>So, let’s start with <code>Location</code> (x and y coordinates) and <code>Direction</code> (north, east, etc…):</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">Location</span> </span>= int * int</div><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">Direction</span> </span>= | North | East | South | West</div></pre></td></tr></table></figure>
<p>There is also a relation between <em>directions</em> (<code>opposite</code>) and a function allowing to move from one <em>location</em> in given <em>direction</em> (<code>shift</code>).  </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> opposite direction = <span class="comment">// Direction -&gt; Direction </span></div><div class="line">    <span class="keyword">match</span> direction <span class="keyword">with</span> </div><div class="line">    | North -&gt; South | South -&gt; North </div><div class="line">    | West -&gt; East | East -&gt; West</div><div class="line"></div><div class="line"><span class="keyword">let</span> shift (x, y) direction = <span class="comment">// Location -&gt; Direction -&gt; Location</span></div><div class="line">    <span class="keyword">match</span> direction <span class="keyword">with</span></div><div class="line">    | North -&gt; (x, y - <span class="number">1</span>) | South -&gt; (x, y + <span class="number">1</span>) </div><div class="line">    | East -&gt; (x + <span class="number">1</span>, y) | West -&gt; (x - <span class="number">1</span>, y)</div></pre></td></tr></table></figure>
<p>Traversing a maze is about <em>actions</em> (or moves). Theoretically, we could model it with single type of action (<em>move south from 5,4 to 5,5</em>), but first move (which is <em>start at 0,0</em>) does not have source nor direction and with language like F# you should not compromise on domain model aka <a href="(https://fsharpforfunandprofit.com/posts/designing-with-types-making-illegal-states-unrepresentable/">make illegal state unrepresentable</a>.<br>So, I ended up with two possible actions: <em>teleporting to starting location</em> and <em>moving from one location to another</em>:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">Action</span> </span>=</div><div class="line">    | InitAt <span class="keyword">of</span> Location</div><div class="line">    | MoveTo <span class="keyword">of</span> Location * Direction * Location</div></pre></td></tr></table></figure>
<p>The <code>Action</code> has it’s “property” called target, the <code>Location</code> where it ends:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Action -&gt; Location</span></div><div class="line"><span class="keyword">let</span> targetOf action = </div><div class="line">    <span class="keyword">match</span> action <span class="keyword">with</span> </div><div class="line">    | InitAt location -&gt; location </div><div class="line">    | MoveTo (_, _, location) -&gt; location</div></pre></td></tr></table></figure>
<h2 id="Bringing-“The-algorithm”-and-“The-domain”-together"><a href="#Bringing-“The-algorithm”-and-“The-domain”-together" class="headerlink" title="Bringing “The algorithm” and “The domain” together"></a>Bringing “The algorithm” and “The domain” together</h2><p>It is important to realize, that DFS in this case does not really traverse <em>rooms</em> (graph nodes), it actually traverses <em>actions</em> (graph edges), although it is the <em>room</em> which is visted (not <em>action</em>).</p>
<p>Long story short, there is some glue needed between “The algorithm” and “The domain” presented above.</p>
<p>Let’s start with some one-liners for solution:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// int -&gt; int -&gt; Action seq</span></div><div class="line"><span class="keyword">let</span> buildMaze width height =</div><div class="line">    <span class="comment">// Location -&gt; bool</span></div><div class="line">    <span class="keyword">let</span> isValid (x, y) = x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x &lt; width &amp;&amp; y &lt; height</div><div class="line">    <span class="keyword">let</span> visited = HashSet()</div><div class="line">    <span class="keyword">let</span> encode (x, y) = y*width + x <span class="comment">// Location -&gt; int</span></div><div class="line">    <span class="comment">// Location -&gt; unit </span></div><div class="line">    <span class="keyword">let</span> mark location = location |&gt; encode |&gt; visited.Add |&gt; ignore</div><div class="line">    <span class="comment">// Location -&gt; bool</span></div><div class="line">    <span class="keyword">let</span> test location = location |&gt; encode |&gt; visited.Contains</div><div class="line">    <span class="comment">//...</span></div></pre></td></tr></table></figure>
<p><em>NOTE</em>: <code>HashSet</code> in Fable is modelled using JavaScript <code>Set</code> which does not use structural equality (I learnt it the hard way). Therefore two identical tuples would not be recognised as such. We need to <code>encode</code> tuple value as something which is properly handled by <code>Set</code>. Encoding tuple as single <code>int</code> is one options, encoding it as <code>string</code> would be also valid (but a little but slower, I suppose).</p>
<p>We have function to test is given <em>location</em> is valid for given maze size (<code>isValid</code>), we can test if <em>action</em> points to a <em>room</em> which has been <em>visisted</em> before (<code>test</code>) and mark the <em>location</em> as <em>visisted</em> if needed (<code>mark</code>). That is just a small vocabulary for our problem.</p>
<p>It’s time to define <code>fanout</code> method which will return all valid the neighbours: </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Location -&gt; Action seq</span></div><div class="line"><span class="keyword">let</span> fanout source =</div><div class="line">    [| West; North; East; South |] </div><div class="line">    |&gt; Array.map (<span class="keyword">fun</span> direction -&gt; MoveTo (source, direction, shift source direction))</div><div class="line">    |&gt; Array.filter (targetOf &gt;&gt; isValid)</div></pre></td></tr></table></figure>
<p>As you can see, it takes a <em>source location</em>, then generates a sequence of <code>MoveTo</code> <em>actions</em> in every direction and then eliminates the ones with invalid <em>target locations</em> (the ones which would point outside the maze). You may wonder why <code>fanout</code> returns candidates in pretty deterministic order. And that’s fair question. I just don’t think randomization stategy is responsibility of <code>fanout</code> function, I think we can postpone this decision (at least for 5 more seconds).</p>
<p>We have all building blocks ready now and it’s time to call <code>DFS.traverse</code> (or <code>DFS.stackless</code>). As I said before <code>traverse</code> operate on <em>actions</em> (not <em>locations</em>), and functions we defined so far work on <em>locations</em>. We will need some adapters, and some randomization of <code>fanout</code> output.</p>
<p>Functional composition to the rescue: </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">InitAt (<span class="number">0</span>, <span class="number">0</span>) </div><div class="line">|&gt; DFS.traverse (targetOf &gt;&gt; mark) (targetOf &gt;&gt; test) (targetOf &gt;&gt; fanout &gt;&gt; Array.shuffle)</div></pre></td></tr></table></figure>
<p>It starts with <em>action</em> (<code>InitAt (0, 0)</code>), and uses composition to adapt input argument of <code>mark</code>, <code>test</code> and <code>fanout</code>. It also randomizes the output of <code>fanout</code> with <code>shuffle</code>.</p>
<p>And this sequence of <em>actions</em> it the result of <code>buildMaze</code>.</p>
<p>Done, again. OK, we need presentation.</p>
<h2 id="Presentation"><a href="#Presentation" class="headerlink" title="Presentation"></a>Presentation</h2><p>Without getting into much details we need a <code>&lt;button&gt;</code> and a <code>&lt;canvas&gt;</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"restart"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>Restart<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">class</span>=<span class="string">"maze"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure>
<p>That’s the UI. Right? Yeah, kind of. Be aware that the code here is for illustration only, please refer to <a href="https://github.com/MiloszKrajewski/fable-daedalus" target="_blank" rel="external">github</a> for actual working sources.</p>
<p>Let’s start with importing native JavaScript libraries: </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> jq = importDefault&lt;obj&gt; <span class="string">"jquery"</span></div><div class="line">(importDefault&lt;obj&gt; <span class="string">"jcanvas"</span>) $ (jq, Browser.window) |&gt; ignore</div></pre></td></tr></table></figure>
<p>As you can see there a little bit weird syntax when accessing arbitrary JavaScript objects. The good news is you can <a href="https://www.npmjs.com/package/ts2fable" target="_blank" rel="external">import</a> <a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="external">TypeScript</a> <code>.d.ts</code> definition files into Fable to have strongly typed interfaces. In this case though, I used so little of it, that I could manage dynamic invocation.</p>
<p>Long story short, <code>importDefault</code> get’s translated into <code>require</code> (for <code>CommonJS</code>). The <code>$</code> operator is <em>invoke</em>, <code>?</code> operator is <em>get</em> and <code>&lt;-</code> is <em>set</em>. <code>$</code> operator in many cases can be ommited.<br>So, <code>a ? b ? c(77)</code> would be translated to <code>a.b.c(77);</code> while <code>a ? b ? c &lt;- 11</code> would be translated to <code>a.b.c = 11;</code>. </p>
<p>Please note, that as there is an assumptions that everything returns <code>obj</code> (or <code>obj -&gt; obj</code> which is also an <code>obj</code>). F# does not like dangling result values so you need to <code>ignore</code> results you don’t care about. I definitely recommend referring to Fable website for more details.</p>
<p>Let’s define some constants:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="meta">[&lt;Literal&gt;]</span> WORLD_WIDTH = <span class="number">100</span></div><div class="line"><span class="keyword">let</span> <span class="meta">[&lt;Literal&gt;]</span> WORLD_HEIGHT = <span class="number">100</span></div><div class="line"><span class="keyword">let</span> <span class="meta">[&lt;Literal&gt;]</span> ROOM_SIZE = <span class="number">5</span></div><div class="line"><span class="keyword">let</span> <span class="meta">[&lt;Literal&gt;]</span> DOOR_SIZE = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="meta">[&lt;Literal&gt;]</span> ROOM_COLOR = <span class="string">"#fff"</span></div><div class="line"><span class="keyword">let</span> <span class="meta">[&lt;Literal&gt;]</span> DOOR_COLOR = <span class="string">"#eee"</span></div></pre></td></tr></table></figure>
<p>and a simple function to convert world <em>location</em> to coordinates in pixels:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> toPixel (x, y) = <span class="comment">// Location -&gt; (int * int) // and yes, I'm cheting with types a little</span></div><div class="line">    x*ROOM_SIZE + (x + <span class="number">1</span>)*DOOR_SIZE, y*ROOM_SIZE + (y + <span class="number">1</span>)*DOOR_SIZE</div></pre></td></tr></table></figure>
<p>Let’s set the <code>&lt;canvas&gt;</code> up, by setting <code>width</code>, <code>height</code>, <code>viewbox</code> and <code>viewport</code> (using jQuery):</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> w, h = toPixel (WORLD_WIDTH, WORLD_HEIGHT)</div><div class="line"><span class="keyword">let</span> canvas = jq $ (<span class="string">"#canvas"</span>)</div><div class="line">canvas </div><div class="line">    ? attr(<span class="string">"width"</span>, w) ? attr(<span class="string">"height"</span>, h) </div><div class="line">    ? attr(<span class="string">"viewbox"</span>, sprintf <span class="string">"0 0 %d %d"</span> w h) </div><div class="line">    ? attr(<span class="string">"viewport"</span>, sprintf <span class="string">"0 0 %d %d"</span> w h) </div><div class="line">    |&gt; ignore</div></pre></td></tr></table></figure>
<p>and wire <code>click</code> event on “Restart” button:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> cancel = id</div><div class="line"><span class="keyword">let</span> button = jq $ (<span class="string">"#restart"</span>)  </div><div class="line">button ? click(<span class="keyword">fun</span> _ -&gt;</div><div class="line">    cancel ()</div><div class="line">    canvas ? clearCanvas () |&gt; ignore</div><div class="line">    cancel &lt;- startAnimation canvas</div><div class="line">) |&gt; ignore</div></pre></td></tr></table></figure>
<p>The thing with <code>cancel</code> might be a little bit unclear. Function <code>startAnimation</code> will return a function (function returning function, yes) which can be called to cancel animation. So next time <code>Restart</code> button is pressed previous animation will be cancelled before starting new one. To avoid <code>null</code> (or <code>None</code>) checking (on first run) <code>cancel</code> just gets initialized with function which does nothing (yes, <code>id</code> is a function which does nothing).</p>
<p>Back to solution, when button is pressed potential old animation is cancelled (<code>cancel()</code>), canvas is cleared (<code>canvas ? clearCanvas () |&gt; ignore</code>) and new animation is started (<code>cancel &lt;- startAnimation canvas</code>).</p>
<p>There is only one method left, then:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> startAnimation canvas = <span class="comment">// ...</span></div></pre></td></tr></table></figure>
<p>Please note, the code below in the scope of <code>startAnimation</code>.</p>
<p>We will definitely need to draw rectangles on canvas, and that’s kind of all we are going to do. I will use <code>jCanvas</code> to do this, but it is an overkill, of course, it could (and should?) be done with browser API, but I’m exploring here, right?<br>As with dynamic invocation eveything is <code>obj</code> we want to add some types when JavaScript and Fable meets. Let’s wrap <code>jCanvas.drawRect</code> first into <code>drawBox</code> function:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> drawBox (color: string) (x: int) (y: int) (w: int) (h: int) =</div><div class="line">    <span class="keyword">let</span> rect = </div><div class="line">        createObj [ </div><div class="line">            <span class="string">"fillStyle"</span> ==&gt; color</div><div class="line">            <span class="string">"x"</span> ==&gt; x; <span class="string">"y"</span> ==&gt; y; <span class="string">"width"</span> ==&gt; w; <span class="string">"height"</span> ==&gt; h </div><div class="line">            <span class="string">"fromCenter"</span> ==&gt; <span class="keyword">false</span> </div><div class="line">        ]</div><div class="line">    canvas ? drawRect(rect) |&gt; ignore</div></pre></td></tr></table></figure>
<p>Yup. Done. Not pretty but done. We can forget about this traumatic experience now. It actually generates quite readable code:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rect = &#123;</div><div class="line">    <span class="attr">fillStyle</span>: color,</div><div class="line">    <span class="attr">x</span>: x,</div><div class="line">    <span class="attr">y</span>: y,</div><div class="line">    <span class="attr">width</span>: w,</div><div class="line">    <span class="attr">height</span>: h,</div><div class="line">    <span class="attr">fromCenter</span>: <span class="literal">false</span></div><div class="line">&#125;;</div><div class="line">canvas.drawRect(rect);</div></pre></td></tr></table></figure>
<p>From now on, we can forget about JavaScript interop again. We can just use <code>drawBox</code> and implement <code>drawRoom</code> to draw a room, and <code>drawDoor</code> to draw a door: </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Location -&gt; unit</span></div><div class="line"><span class="keyword">let</span> drawRoom location =</div><div class="line">    <span class="keyword">let</span> x, y = toPixel location <span class="keyword">in</span> drawBox ROOM_COLOR x y ROOM_SIZE ROOM_SIZE</div><div class="line"></div><div class="line"><span class="comment">// Location -&gt; Direction -&gt; unit    </span></div><div class="line"><span class="keyword">let</span> drawDoor location direction =</div><div class="line">    <span class="keyword">let</span> x, y = toPixel location</div><div class="line">    <span class="keyword">match</span> direction <span class="keyword">with</span></div><div class="line">    | North -&gt; drawBox DOOR_COLOR x (y - DOOR_SIZE) ROOM_SIZE DOOR_SIZE</div><div class="line">    | South -&gt; drawBox DOOR_COLOR x (y + ROOM_SIZE) ROOM_SIZE DOOR_SIZE</div><div class="line">    | East -&gt; drawBox DOOR_COLOR (x + ROOM_SIZE) y DOOR_SIZE ROOM_SIZE</div><div class="line">    | West -&gt; drawBox DOOR_COLOR (x - DOOR_SIZE) y DOOR_SIZE ROOM_SIZE</div></pre></td></tr></table></figure>
<p><code>Room</code> is drawn as big square, while <code>Door</code> is just a slim rectangle (depends on relation between <code>DOOR_SIZE</code> and <code>ROOM_SIZE</code>). As you can see doors have different shape depending on direction (for example: North vs East).</p>
<p><img src="/images/maze/maze-5x5.png" alt="5x5"></p>
<p>Now, we need to start traversing the maze:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> action = buildMaze WORLD_WIDTH WORLD_HEIGHT |&gt; Enumerator.create</div></pre></td></tr></table></figure>
<p>You can notice <code>Enumerator</code> here, which might be a little bit cryptic but it just provides slighlty more F#-ish way to use <code>IEnumerable&lt;T&gt;</code> interface. </p>
<p>The last part is the animation loop, we need to draw actions as they come. Let’s schedule a callback every 1/60th of a second (should I use <code>requestAnimationFrame</code> here?) which will take current frame (well… <em>action</em>), draw adequate objects (<code>drawRoom</code> and <code>drawDoor</code>) and then proceed to next <em>action</em> (<code>action &lt;- action |&gt; Option.bind Enumerator.next</code>):</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> cancel = id</div><div class="line">cancel &lt;- Time.interval (<span class="number">1.0</span> / <span class="number">60.0</span>) (<span class="keyword">fun</span> _ -&gt;</div><div class="line">    <span class="keyword">match</span> action |&gt; Option.map Enumerator.value <span class="keyword">with</span></div><div class="line">    | None -&gt; cancel ()</div><div class="line">    | Some (InitAt location) -&gt; </div><div class="line">        drawRoom location</div><div class="line">    | Some (MoveTo (_, direction, location)) -&gt; </div><div class="line">        drawRoom location</div><div class="line">        drawDoor location (opposite direction)</div><div class="line">    action &lt;- action |&gt; Option.bind Enumerator.next </div><div class="line">)</div><div class="line">cancel</div></pre></td></tr></table></figure>
<p>The last line returns <code>cancel</code> (returns a function, but does not call it) from <code>startAnimation</code> so animation can be externally cancelled.<br>Note: <code>Time.interval</code> is just a wrapper for <code>setInterval</code> and <code>clearInterval</code> to have more F#-ish experience:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> Time =</div><div class="line">    <span class="keyword">open</span> Fable.Import.Browser</div><div class="line">    <span class="comment">// float -&gt; (unit -&gt; unit) -&gt; (unit -&gt; unit)</span></div><div class="line">    <span class="keyword">let</span> interval seconds (action: unit -&gt; unit) =</div><div class="line">        <span class="keyword">let</span> disposable = window.setInterval (action, seconds * <span class="number">1000.0</span>)</div><div class="line">        <span class="keyword">fun</span> () -&gt; window.clearInterval(disposable)</div></pre></td></tr></table></figure>
<p>I guess that’s it.</p>
<p>You can find solution on <a href="https://github.com/MiloszKrajewski/fable-daedalus" target="_blank" rel="external">github</a>. It actually has many branches as I was trying many approaches. I started with “Immutable domain with VirtualDOM to generate SVG”, then I switched to “Mutable domain with VirtualDOM to generate SVG paths”, then I switched to “Mutable domain with jCanvas” and then I realized that half of domain was actually needed by VirtualDOM approach only. So, last incarnation if Daedalus is “Mutable mini domain with jCanvas”. </p>
<p>If you want to just see it work, you can find it <a href="/fable-daedalus/index.html">here</a></p>
<h2 id="Dealing-with-“low-branching-factor”"><a href="#Dealing-with-“low-branching-factor”" class="headerlink" title="Dealing with “low branching factor”"></a>Dealing with “low branching factor”</h2><p>As mentioned DFS has a problem with low branching factor. I’ll try to address the problem in <a href="/2016/09/15/Shaking-maze-generator/">next blogpost</a>.</p>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ul>
<li><a href="https://fable-compiler.github.io/" target="_blank" rel="external">Fable</a></li>
<li><a href="https://webpack.github.io/" target="_blank" rel="external">Webpack</a></li>
<li><a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a></li>
<li><a href="http://ionide.io/" target="_blank" rel="external">Ionide</a></li>
<li><a href="http://cmder.net/" target="_blank" rel="external">Cmder</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Quick-links&quot;&gt;&lt;a href=&quot;#Quick-links&quot; class=&quot;headerlink&quot; title=&quot;Quick links&quot;&gt;&lt;/a&gt;Quick links&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2016/09/14/Maze-ge
    
    </summary>
    
    
      <category term="maze" scheme="http://red-green-rewrite.github.io/tags/maze/"/>
    
      <category term="algorithm" scheme="http://red-green-rewrite.github.io/tags/algorithm/"/>
    
      <category term="fsharp" scheme="http://red-green-rewrite.github.io/tags/fsharp/"/>
    
      <category term="fable" scheme="http://red-green-rewrite.github.io/tags/fable/"/>
    
  </entry>
  
  <entry>
    <title>Use tee and carry on</title>
    <link href="http://red-green-rewrite.github.io/2016/09/14/Use-apply-and-carry-on/"/>
    <id>http://red-green-rewrite.github.io/2016/09/14/Use-apply-and-carry-on/</id>
    <published>2016-09-14T17:47:16.000Z</published>
    <updated>2016-09-26T15:29:31.383Z</updated>
    
    <content type="html"><![CDATA[<p>Originally, this blogpost was titled “Use apply and carry on”, but I guess naming the function <code>apply</code> after <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/apply.html" target="_blank" rel="external">Kotlin</a> (damn you, Kotlin!) wasn’t the most preferred option by the public. I did like <code>apple |&gt; apply eat</code> semantics but if Scott Wlaschin says <code>apply</code> is a <a href="https://fsharpforfunandprofit.com/posts/elevated-world/#apply" target="_blank" rel="external">different thing</a> then it is a different thing. To be precise Scott’s is <code>apply: (a -&gt; b) -&gt; a -&gt; b</code> and mine <em>was</em> (emphasize on was) <code>apply: (a -&gt; unit) -&gt; a -&gt; a</code>. Apparently, the function which does whatever I wanted <code>apply</code> to do is called <code>tee</code> (<a href="https://fsharpforfunandprofit.com/posts/recipe-part2/" target="_blank" rel="external">after Unix command</a>) or <code>tap</code> (at least in <a href="https://ruby-doc.org/core-2.2.3/Object.html#method-i-tap" target="_blank" rel="external">Ruby</a> and <a href="http://ramdajs.com/docs/#tap" target="_blank" rel="external">Ramda.js</a>).</p>
<p>So I’ve edited it and replaced <code>apply</code> with <code>tee</code>, but essentially it is almost unchanged… Let’s go then.</p>
<hr>
<p>One of everyone’s favourite features of F# is pipe (<code>|&gt;</code>) operator. It allows to pipe output of one function as input to another function preserving <a href="http://theburningmonk.com/2014/12/being-visually-honest-with-f/" target="_blank" rel="external">visual honesty</a>. The general idea is that, in English, we read <em>left-to-right</em> and <em>top-down</em>. In C# (C, C++, Java, Pascal, Python) we read in all possible directions, most likely <em>top-down</em> for overall structure but <em>botton-up</em> and <em>right-to-left</em> for single statements.</p>
<p><img src="http://theburningmonk.com/WordPress/wp-content/uploads/2015/03/visual_dishonesty.png" alt="Visual honesty"></p>
<p>For example:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> y = Math.Round(Math.Exp(Math.Sin(x*<span class="number">5.2</span> + <span class="number">7.1</span>)));</div></pre></td></tr></table></figure>
<p>starts at the <em>right</em> end going <em>left-to-right</em> for a moment (<code>x*5.2 + 7.1</code>) but then turns <em>right-to-left</em> with <code>Math.Sin</code>, <code>Math.Exp</code> and finally <code>Math.Round</code> (in this order). In F# the pipe operator (<code>|&gt;</code>) allows to write code exactly in the same order as it is going to be executed:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> y = x*<span class="number">5.2</span> + <span class="number">7.1</span> |&gt; Math.Sin |&gt; Math.Exp |&gt; Math.Round</div></pre></td></tr></table></figure>
<p>Around the world, many hours have been spent arranging function arguments (guilty!) to allow such seamless experience. But sometimes, the universe is against us. Let’s assume we would like to print out the value after <code>Math.Sin</code>. The conservative approach would be quite intrusive - we would need to break expression in half:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> temp = x*<span class="number">5.2</span> + <span class="number">7.1</span> |&gt; Math.Sin </div><div class="line">printf <span class="string">"%g"</span> temp</div><div class="line"><span class="keyword">let</span> y = temp |&gt; Math.Exp |&gt; Math.Round</div></pre></td></tr></table></figure>
<p>Whoa! That is intrusive. </p>
<p>But here comes the rescue. The <code>tee</code> function implemented as:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> tee func arg = func arg; arg</div></pre></td></tr></table></figure>
<p>The function itself is trivial, it takes a function and an argument, executes given function with given argument but then returns it, so the argument goes through the function: </p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> y = x*<span class="number">5.2</span> + <span class="number">7.1</span> |&gt; Math.Sin |&gt; tee (printf <span class="string">"%g"</span>) |&gt; Math.Exp |&gt; Math.Round</div></pre></td></tr></table></figure>
<p>In the example above, the value passed between <code>Math.Sin</code> and <code>Math.Exp</code> has been redirected “for a moment” to <code>printf &quot;%g&quot;</code> without any temporary variables or breaking the flow.</p>
<p>Recently I needed to shuffle an array. The algorithm I used shuffles array in place:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">inline</span> swapInPlace i j (array: <span class="symbol">'a</span>[]) = </div><div class="line">    <span class="keyword">let</span> t = array.[i]</div><div class="line">    array.[i] &lt;- array.[j]</div><div class="line">    array.[j] &lt;- t</div><div class="line"></div><div class="line"><span class="keyword">let</span> shuffleInPlace (array: <span class="symbol">'a</span>[]) =</div><div class="line">    <span class="keyword">for</span> i = array.Length - <span class="number">1</span> <span class="keyword">downto</span> <span class="number">1</span> <span class="keyword">do</span></div><div class="line">        array |&gt; swapInPlace i (Random.randomInt <span class="number">0</span> i)</div></pre></td></tr></table></figure>
<p>(<code>Random.randomInt</code> is not a standard function, but its implementation is irrelevant for this example)</p>
<p>I needed it as pure function, which will not mutate input array, just return shuffled version of it. Let’s do it:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> shuffle array = </div><div class="line">    <span class="keyword">let</span> result = Array.copy array</div><div class="line">    shuffleInPlace result</div><div class="line">    result</div></pre></td></tr></table></figure>
<p>Maybe we can do better with <code>tee</code>? Yes, we can:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> shuffle array = array |&gt; Array.copy |&gt; tee shuffleInPlace</div></pre></td></tr></table></figure>
<p>Much better. </p>
<p>So, <strong>use tee and carry on</strong>!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Originally, this blogpost was titled “Use apply and carry on”, but I guess naming the function &lt;code&gt;apply&lt;/code&gt; after &lt;a href=&quot;https://
    
    </summary>
    
    
      <category term="fsharp" scheme="http://red-green-rewrite.github.io/tags/fsharp/"/>
    
  </entry>
  
  <entry>
    <title>State Machine Construction Kit for F#</title>
    <link href="http://red-green-rewrite.github.io/2016/06/27/State-Machine-Construction-Kit-for-F/"/>
    <id>http://red-green-rewrite.github.io/2016/06/27/State-Machine-Construction-Kit-for-F/</id>
    <published>2016-06-27T00:46:03.000Z</published>
    <updated>2016-09-26T15:29:31.383Z</updated>
    
    <content type="html"><![CDATA[<p><strong>NOTE</strong>: There is a lot of code in this article, as it is repeated and iteratively added. The final version is just 28 lines near the end, but I think you should read the whole thing anyway.</p>
<p>Once upon the time I needed to implement state machine. To not reinvent the wheel I reviewed what’s available: <a href="http://msdn.microsoft.com/en-gb/vstudio/jj684582.aspx" target="_blank" rel="external">Windows Workflow Foundation</a>, <a href="https://github.com/appccelerate/statemachine" target="_blank" rel="external">Appccelerate.StateMachine</a>, <a href="https://code.google.com/p/bbvcommon/wiki/StateMachineTutorial" target="_blank" rel="external">bbv.Common.StateMachine</a>, <a href="https://github.com/nblumhardt/stateless" target="_blank" rel="external">Stateless</a>, <a href="http://simplestatemachine.codeplex.com" target="_blank" rel="external">SimpleStateMachine</a>, <a href="https://code.google.com/p/solid-state" target="_blank" rel="external">Solid.State</a>, and <a href="https://github.com/OmerMor/StateMachineToolkit/tree/master/src/StateMachineToolkit" target="_blank" rel="external">StateMachineToolkit</a>. Windows Workflow Foundation was just scary, apart from the fact that State Machine is not available in .NET 4.0. It didn’t look lightweight either.</p>
<p>None of the others satisfied my requirements either:</p>
<ul>
<li><strong>Events should be able to carry data</strong> - for example, hypothetical event <code>KeyPressed</code> should also carry information which key has been actually pressed;</li>
<li><strong>States should be able hold data</strong> - for example, state collecting key presses (let’s call it <code>EnteringText</code>) should be able to hold a list of keys pressed so far;</li>
<li><strong>Guard statements should have access to both current state and event</strong> - for example, <code>KeyPressed</code> event may cause transition to different state depending which key has been pressed;</li>
<li><strong>Transition rules should be implemented outside states</strong> - states should be more like POCO/DTO object with no logic in them;</li>
</ul>
<p>I’ve implemented it in C#, and I’m relatively happy with it, and you can find it on <a href="https://github.com/MiloszKrajewski/Stateful" target="_blank" rel="external">GitHub</a>. As an exercise I implemented it for <a href="https://kotlinlang.org" target="_blank" rel="external">Kotlin</a> as well, also on <a href="https://github.com/MiloszKrajewski/stateful4k" target="_blank" rel="external">GitHub</a>. Then I had to implement one for work, in Java this time.</p>
<p>I decided that maybe it’s time to do something for F# community, and implement nice functional State Machine Construction Kit. I dropped the “transition rules should be implemented outside states” requirement as it was adding some messy reflection code.</p>
<p>To make it more F#y and functional I started with fundamental question: what is the <code>state</code>? What is its essence?<br>It is actually a function which will take an <code>event</code> and produce new state:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">State</span>&lt;'Event&gt; </span>= 'Event -&gt; State&lt;'Event&gt;</div></pre></td></tr></table></figure>
<p>This would actually not compile, because it would create infinite recursive type alias, but:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">State</span>&lt;'Event&gt; </span>= | State <span class="keyword">of</span> ('Event -&gt; State)</div></pre></td></tr></table></figure>
<p>will do just fine.<br>Actually it would be a little but nicer if it would be possible to return <code>State option</code> to handle termination:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">State</span>&lt;'Event&gt; </span>= | State <span class="keyword">of</span> ('Event -&gt; State option)</div></pre></td></tr></table></figure>
<p>…but, I decided to make it rather with explicit state case:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">State</span>&lt;'Event&gt; </span>=</div><div class="line">    | Next <span class="keyword">of</span> ('Event -&gt; State)</div><div class="line">    | Stop</div></pre></td></tr></table></figure>
<p>So we have transitive state (<code>Next</code> for <code>State (Some state)</code>) and terminal state (<code>Stop</code> for <code>State None</code>).<br>Please note, that we could add more cases, for example:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">State</span>&lt;'Event, 'Result&gt; </span>=</div><div class="line">    | Next <span class="keyword">of</span> ('Event -&gt; State)</div><div class="line">    | Stop <span class="keyword">of</span> 'Result</div><div class="line">    | Fail <span class="keyword">of</span> Exception</div></pre></td></tr></table></figure>
<p>but this would introduce some complexity which I don’t want in this example, but you are more than welcome to introduce yourself.<br>So, let’s go back to my State Machine Construction Kit. We already have a state but we also need a function to fire events and transition from state to state, let’s call it <code>feed</code>, we feed a state with event. It’s actually almost done as state is a transition function:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> feed state event =</div><div class="line">    <span class="keyword">match</span> state <span class="keyword">with</span></div><div class="line">    | Stop -&gt; failwith <span class="string">"Terminal state reached"</span></div><div class="line">    | Next handler -&gt; event |&gt; handler</div></pre></td></tr></table></figure>
<p>For this example I will use some trivial state machine handling opening and closing doors:</p>
<p><img src="https://github.com/MiloszKrajewski/stateful4k/raw/master/doc/basic-door-machine.png" alt="simple door state machine"></p>
<p>So we have <code>Open</code> and <code>Close</code> events:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">Event</span> </span>= | Open | Close</div></pre></td></tr></table></figure>
<p>…and have two states: <code>opened</code> and <code>closed</code>. The states themselves are functions which take events and produce new states:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">rec</span> opened event =</div><div class="line">    <span class="keyword">match</span> event <span class="keyword">with</span></div><div class="line">    | Open -&gt; Next opened</div><div class="line">    | Close -&gt; printfn <span class="string">"closing"</span>; Next closed</div><div class="line"><span class="keyword">and</span> closed event =</div><div class="line">    <span class="keyword">match</span> event <span class="keyword">with</span></div><div class="line">    | Open -&gt; printfn <span class="string">"opening"</span>; Next opened</div><div class="line">    | Close -&gt; Next closed</div></pre></td></tr></table></figure>
<p>Let’s define an initial state, a let’s say it is <code>closed</code>:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> state = Next closed</div></pre></td></tr></table></figure>
<p>Now we can send <code>Open</code> event to it and store new state:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">state &lt;- Open |&gt; feed state</div></pre></td></tr></table></figure>
<p>Ta-dah! Done.</p>
<p>Please note, that to handle sequence of events easily, the only thing you need to is to use <code>fold</code>:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">events |&gt; Seq.fold feed state</div></pre></td></tr></table></figure>
<p>For my personal use I actually created a class to encapsulate mutability. It is, of course, still there but hidden:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">StateMachine</span>&lt;'Event&gt;</span>(initial: State&lt;'Event&gt;) =</div><div class="line">    <span class="keyword">let</span> <span class="keyword">mutable</span> current = initial</div><div class="line">    <span class="keyword">member</span> this.Feed event =</div><div class="line">        current &lt;- feed current event</div><div class="line">    <span class="keyword">member</span> this.IsStopped</div><div class="line">        <span class="keyword">with</span> get () = <span class="keyword">match</span> current <span class="keyword">with</span> | Stop -&gt; <span class="keyword">true</span> | _ -&gt; <span class="keyword">false</span></div></pre></td></tr></table></figure>
<p>What about context (data shared by all states) and state’s state (state internal data) you might ask? By the power of closures and currying there is nothing special to implement. For example, let’s imagine a door state machine which makes sounds (with injected sound emitter) and can be locked or unlocked when closed (state’s internal data):</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">Event</span> </span>= | Open | Close | Lock | Unlock</div><div class="line"></div><div class="line"><span class="keyword">let</span> configureDoor sound =</div><div class="line">    <span class="keyword">let</span> <span class="keyword">rec</span> opened event =</div><div class="line">        <span class="keyword">match</span> event <span class="keyword">with</span></div><div class="line">        | Close -&gt; sound <span class="string">"bang"</span>; Next (closed <span class="keyword">false</span>)</div><div class="line">        | Lock -&gt; sound <span class="string">"clack"</span>; Next opened</div><div class="line">        | _ -&gt; Next opened</div><div class="line">    <span class="keyword">and</span> closed locked event =</div><div class="line">        <span class="keyword">match</span> event <span class="keyword">with</span></div><div class="line">        | Open <span class="keyword">when</span> locked -&gt; sound <span class="string">"dumdum"</span>; Next (closed locked)</div><div class="line">        | Open -&gt; sound <span class="string">"squeak"</span>; Next opened</div><div class="line">        | Lock -&gt; sound <span class="string">"click"</span>; Next (closed <span class="keyword">true</span>)</div><div class="line">        | Unlock -&gt; sound <span class="string">"clack"</span>; Next (closed <span class="keyword">false</span>)</div><div class="line">        | _ -&gt; Next (closed locked)</div><div class="line">    Next (closed <span class="keyword">false</span>)</div></pre></td></tr></table></figure>
<p>Note, there is a <code>sound</code> function passed and all states have access to it and this is your context. Additionally <code>closed</code> state has a <code>locked</code> ‘property’ and behaves differently depending on the value is this property (cannot be opened when closed, and needs to be unlocked first). You can call it substate if you want.</p>
<p>What if I don’t like mutable variables and I want my state machine to be an actor / agent? Let’s just wrap it:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> createAgent initial =</div><div class="line">    MailboxProcessor.Start (<span class="keyword">fun</span> inbox -&gt;</div><div class="line">        <span class="keyword">let</span> <span class="keyword">rec</span> loop state = async &#123;</div><div class="line">            <span class="keyword">let!</span> event = inbox.Receive ()</div><div class="line">            <span class="keyword">match</span> event |&gt; feed state <span class="keyword">with</span></div><div class="line">            | Stop -&gt; ()</div><div class="line">            | Next _ <span class="keyword">as</span> next -&gt; <span class="keyword">return!</span> loop next</div><div class="line">        &#125;</div><div class="line">        loop initial</div><div class="line">    )</div></pre></td></tr></table></figure>
<p>So, the full module, already a little bit bloated with helper functions, is:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> StateMachine =</div><div class="line">    <span class="class"><span class="keyword">type</span> <span class="title">State</span>&lt;'Event&gt; </span>=</div><div class="line">        | Next <span class="keyword">of</span> ('Event -&gt; State&lt;'Event&gt;)</div><div class="line">        | Stop</div><div class="line"></div><div class="line">    <span class="keyword">let</span> feed state event =</div><div class="line">        <span class="keyword">match</span> state <span class="keyword">with</span></div><div class="line">        | Stop -&gt; failwith <span class="string">"Terminal state reached"</span></div><div class="line">        | Next handler -&gt; event |&gt; handler</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">type</span> <span class="title">StateMachine</span>&lt;'event&gt;</span>(initial: State&lt;'event&gt;) =</div><div class="line">        <span class="keyword">let</span> <span class="keyword">mutable</span> current = initial</div><div class="line">        <span class="keyword">member</span> this.Fire event = current &lt;- feed current event</div><div class="line">        <span class="keyword">member</span> this.IsStopped</div><div class="line">            <span class="keyword">with</span> get () = <span class="keyword">match</span> current <span class="keyword">with</span> | Stop -&gt; <span class="keyword">true</span> | _ -&gt; <span class="keyword">false</span></div><div class="line"></div><div class="line">    <span class="keyword">let</span> createMachine initial = StateMachine(initial)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> createAgent initial =</div><div class="line">        MailboxProcessor.Start (<span class="keyword">fun</span> inbox -&gt;</div><div class="line">            <span class="keyword">let</span> <span class="keyword">rec</span> loop state = async &#123;</div><div class="line">                <span class="keyword">let!</span> event = inbox.Receive ()</div><div class="line">                <span class="keyword">match</span> event |&gt; feed state <span class="keyword">with</span></div><div class="line">                | Stop -&gt; ()</div><div class="line">                | Next _ <span class="keyword">as</span> next -&gt; <span class="keyword">return!</span> loop next</div><div class="line">            &#125;</div><div class="line">            loop initial</div><div class="line">        )</div></pre></td></tr></table></figure>
<p>I can run this now with:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> agent = printfn <span class="string">"%s"</span> |&gt; configureDoor |&gt; StateMachine.createAgent</div><div class="line">agent.Post Lock <span class="comment">// click</span></div><div class="line">agent.Post Unlock <span class="comment">// clack</span></div><div class="line">agent.Post Open <span class="comment">// squeak</span></div><div class="line">agent.Post Close <span class="comment">// bang</span></div></pre></td></tr></table></figure>
<p>I have to admit. I failed. There is no such thing as State Machine Construction Kit for F#, at least not the one worth releasing, in short, there is just a function:</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">StateMachineConstructionKit</span> </span>= 'State -&gt; 'Event -&gt; 'State</div></pre></td></tr></table></figure>
<p>but I just can’t put it on GitHub. Maybe <a href="https://gist.github.com/MiloszKrajewski/b0a2668ab10d8b567b89b1b078c02a2f#file-statemachine-fs" target="_blank" rel="external">gist</a>?</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: There is a lot of code in this article, as it is repeated and iteratively added. The final version is just 28 line
    
    </summary>
    
    
      <category term="fsharp" scheme="http://red-green-rewrite.github.io/tags/fsharp/"/>
    
      <category term="state-machine" scheme="http://red-green-rewrite.github.io/tags/state-machine/"/>
    
  </entry>
  
  <entry>
    <title>A perfect square kata</title>
    <link href="http://red-green-rewrite.github.io/2016/05/17/A-perfect-square-kata/"/>
    <id>http://red-green-rewrite.github.io/2016/05/17/A-perfect-square-kata/</id>
    <published>2016-05-17T15:44:09.000Z</published>
    <updated>2016-09-26T15:29:31.373Z</updated>
    
    <content type="html"><![CDATA[<p>I was doing some katas on <a href="http://www.codewars.com/" target="_blank" rel="external">CodeWars</a> recently, and some of them were involving <a href="https://en.wikipedia.org/wiki/Square_number" target="_blank" rel="external">perfect square numbers</a>. In short, perfect square number is an integer which square root is also an integer, like 9, 16, 25, and 36.</p>
<p>Anyway, solutions which got most votes in both categories, <em>best practice</em> and <em>clever</em> use:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsPerfectSquare</span>(<span class="params"><span class="keyword">long</span> number</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> Math.Sqrt(number) % <span class="number">1</span> == <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This is kind of clever, as .NET (surprisingly) does not provide <code>double Math.Frac(double)</code>, which would need to be implemented as:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">Frac</span>(<span class="params"><span class="keyword">double</span> number</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> number - Math.Floor(number);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>But is it correct (best practice) at all?</strong></p>
<p>Every time you see equals (<code>==</code>) used with floating point types the red light should go off in your head. Equality and floating point numbers do not work well together. Floating point numbers are usually greater (or equal) than (<code>&gt;</code> or <code>&gt;=</code>), less (or equal) than (<code>&lt;</code> or <code>&lt;=</code>), or within particular range (<code>Math.Abs(x - y) &lt;= Epsilon</code>), but they are rarely equal (<code>==</code>). At least you should not rely on that.</p>
<p>Just try that:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0.0</span>;</div><div class="line">Debug.Assert(sum == <span class="number">0.0</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) sum += <span class="number">0.1</span>;</div><div class="line">Debug.Assert(sum == <span class="number">100</span>*<span class="number">0.1</span>); <span class="comment">// FAIL! 9.99999999999998 != 10</span></div></pre></td></tr></table></figure>
<p>So I know that <em>clever</em> implementation of <code>IsPerfectSquare</code> is potentially flawed, but as a true wannabe skeptic, I also know that experiment beats theory. I decided to find what is the smallest <em>not so perfect square number</em> which will deceive this method and force it to provide <em>false positive</em>.<br>The best bet is a number which is <em>true perfect square plus 1</em>, so:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">IsPerfectSquare</span>(<span class="params"><span class="keyword">long</span> number</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> Math.Sqrt(number) % <span class="number">1</span> == <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1</span>; i &lt; <span class="keyword">int</span>.MaxValue; i++) &#123;</div><div class="line">        <span class="keyword">var</span> fake = i*i + <span class="number">1</span>; <span class="comment">// fake perfect square</span></div><div class="line">        <span class="keyword">if</span> (IsPerfectSquare(fake)) &#123;</div><div class="line">            Console.WriteLine(<span class="string">"&#123;0&#125; is the smallest fake perfect square"</span>, fake);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>…and we have an answer in below 3s:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">4503599627370497 is the smallest fake perfect square</div></pre></td></tr></table></figure>
<p>which is <code>67108864^2 + 1</code>.</p>
<p>How can we implement <code>IsPerfectSquare</code> properly then?</p>
<p>For square roots in integer domain we should probably use <a href="http://stackoverflow.com/questions/1100090/looking-for-an-efficient-integer-square-root-algorithm-for-arm-thumb2" target="_blank" rel="external">dedicated algorithm</a> but because this is outside of the scope here (and outside the scope of this kata, I suppose) we need to think how to make <code>Math.Sqrt(...)</code> work for us.</p>
<p>We need to bring the equality test back to integer domain. So, even if we use floating point numbers to calculate square root, we will perform the test itself using integers.</p>
<p>Let’s get the integer (rounded) “square root candidate” first:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> root = (<span class="keyword">long</span>)Math.Sqrt(number);</div></pre></td></tr></table></figure>
<p>…and then test if it is really is a square root of given number:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> root*root == number;</div></pre></td></tr></table></figure>
<p>That’s it. Not much more code. There was really no reason to sacrifice correctness for “cleverness”.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsPerfectSquare</span>(<span class="params"><span class="keyword">long</span> number</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> root = (<span class="keyword">long</span>)Math.Sqrt(number);</div><div class="line">    <span class="keyword">return</span> root*root == number;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>As a bonus we can also check if rounding might be a problem leading to <em>false negatives</em>:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> max = (<span class="keyword">long</span>)<span class="keyword">int</span>.MaxValue;</div><div class="line">Debug.Assert((<span class="keyword">long</span>)Math.Sqrt(max*max) == max); <span class="comment">// SUCCESS!</span></div></pre></td></tr></table></figure>
<p>…and it (most likely) won’t.<br>Of course, this approach will stop working at some point:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> number = <span class="keyword">new</span> BigInteger(<span class="keyword">long</span>.MaxValue);</div><div class="line"><span class="keyword">var</span> square = number*number;</div><div class="line"><span class="keyword">var</span> root = <span class="keyword">new</span> BigInteger(Math.Sqrt((<span class="keyword">double</span>)square));</div><div class="line">Debug.Assert(root == number); <span class="comment">// FAIL!</span></div></pre></td></tr></table></figure>
<p>…but that’s different story.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I was doing some katas on &lt;a href=&quot;http://www.codewars.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodeWars&lt;/a&gt; recently, and some of them were 
    
    </summary>
    
    
      <category term="kata" scheme="http://red-green-rewrite.github.io/tags/kata/"/>
    
      <category term="csharp" scheme="http://red-green-rewrite.github.io/tags/csharp/"/>
    
  </entry>
  
</feed>
